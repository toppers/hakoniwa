<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started on 箱庭</title><link>https://toppers.github.io/hakoniwa/getting-started/</link><description>Recent content in Getting started on 箱庭</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 14 May 2022 13:26:38 +0900</lastBuildDate><atom:link href="https://toppers.github.io/hakoniwa/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>箱庭のアーキテクチャ</title><link>https://toppers.github.io/hakoniwa/getting-started/architecture-overview/</link><pubDate>Sat, 14 May 2022 13:26:27 +0900</pubDate><guid>https://toppers.github.io/hakoniwa/getting-started/architecture-overview/</guid><description>前提環境 箱庭 ROS シミュレータ:hakoniwa-ros2sim を例題に解説するため、このチュートリアルが終わっておりプロジェクトが参照できることが望ましいです。
ROS向け箱庭のシステム構成 ros2simのプロジェクトでは、Unity上のTortleBot3(tb3)をROS2のアプリから制御するシミュレーションを行います。 以下にWindows/WSL2でのシステム構成を示しています。大まかには制御対象であるUnity上のtb3とそれを制御するtb3ctrlがROSで通信しています。
フォルダ構成 githubからCloneしたプロジェクトのフォルダ構成は以下のようになっています。主に/ros2/workspace, /ros2/unityを扱えばよく、 他のフォルダは本説明には含まれないため一旦無視してください。
hakowani-ros2sim/ ros2/ workspace/ : ROSのワークスペース。Docker上にマウントされる unity/tb3/ : Unityのプロジェクト workspace/はROSのワークスペースで、ここに制御用のROSアプリを作成します。src下にはいくつかアプリが入っていますが、 tb3ロボットを制御しているのはtb3フォルダ下のソースとなります。 プログラムを修正した場合はbash build.bashを行うことでビルドされアプリが更新されます。
unity/はUnityプロジェクトが入っており、Unity Editorからtb3フォルダを開くと読み込めます。 cloneしたすぐの状態では、すべてのアセットは揃っておらずhako-install.bashによって必要なアセットのダウンロードや設定を行います。
チュートリアルでの操作による挙動 $ bash docker/pull-image.bash : 本プロジェクトで用いるROSが入ったDockerイメージの取得を行っています。 $ bash docker/run.bash : 取得したDockerのコンテナを作成しbashでログインします。またこの時カレントディレクトリにworkspace以下をマウントしています。 # bash hako-install.bash : unityフォルダにUnityのプロジェクトを展開すると共に、ROSと繋ぐための初期設定を行います。 (Terminal A)$ bash run.bash : Dockerコンテナを起動しbashでログインします。 (Terminal A)# bash launch.bash : UnityとROSで通信するための、ROS-TCP-Endpointを起動します。またUnityプロジェクトにはこのプログラムと対になる (Terminal B)$ bash attach.bash : Terminal Aで立ち上げたコンテナに入ります。 (Terminal B)# bash run.bash : ロボットを制御するROSアプリのtb3ctrlを実行します。このプログラムのソースはworkspace/src/tb3/src/tb3ctrl.cppです。</description></item><item><title>制御プログラムの変更方法</title><link>https://toppers.github.io/hakoniwa/getting-started/app-customize/</link><pubDate>Sat, 14 May 2022 13:26:38 +0900</pubDate><guid>https://toppers.github.io/hakoniwa/getting-started/app-customize/</guid><description>ソースコードの場所 今回のサンプルのtb3の制御プログラムは、 /ros2/workspace/src/tb3/src/tb3ctrl.cpp に配置されています。 詳細は実際のコードを見て頂くとして主要な部分を紹介していきます。ページの最後にコードの抜粋を示します。
制御プログラムの概要 Unity上のロボットと制御プログラムとは、ROSで通信しています。 Unity上のロボットからはレーザースキャナから周囲360°の距離データが送られてきます。制御プログラムからはロボットの移動量を送信します。
この制御プログラムは、壁沿いに周回するような制御を行っています。do_forwardで前方の距離が一定以上あれば前進し、turn_rightでは右側の距離が一定以上であれば旋回します。
このように制御部分は非常に小さく、他はROSで通信するためのボイラープレートとなっています。 制御部分のパラメータを変えることで、自由にロボットを制御することができます。いろいろと書き換えて試してみてください。 なお、コードを書き換えた後は、Dockerのコンテナ内でbuild.bashを実行してプログラムのコンパイルを行ってください。
制御プログラムの抜粋 // ロボットのレーザースキャナから受け取る360°周囲の距離データ typedef struct { double ranges[360]; } ScanDataType; static ScanDataType scan_data; // レーザースキャナから受け取ったデータのROSのコールバック関数。取得したデータをscan_data変数に保持する。 static void scanCallback(const sensor_msgs::msg::LaserScan::SharedPtr msg) { int i; for (i = 0; i &amp;lt; 360; i++) { scan_data.ranges[i] = msg-&amp;gt;ranges[i]; } return; } // Unity上のロボットの制御値 static geometry_msgs::msg::Twist cmd_vel; static float get_forward_distance(void) { ... // 前方向の一定角度のうち一番近い距離を取得 } static float get_right_distance(void) { ... // 右側の一定角度のうち一番近い距離を取得 } static bool do_forward(void) { .</description></item><item><title>コースの変更方法</title><link>https://toppers.github.io/hakoniwa/getting-started/env-customize/</link><pubDate>Sat, 14 May 2022 13:26:38 +0900</pubDate><guid>https://toppers.github.io/hakoniwa/getting-started/env-customize/</guid><description>執筆中</description></item><item><title>ロボットのカスタマイズ方法</title><link>https://toppers.github.io/hakoniwa/getting-started/robot-customize/</link><pubDate>Sat, 14 May 2022 13:26:38 +0900</pubDate><guid>https://toppers.github.io/hakoniwa/getting-started/robot-customize/</guid><description>執筆中</description></item></channel></rss>