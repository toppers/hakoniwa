<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>箱庭</title><link>https://toppers.github.io/hakoniwa/</link><description>Recent content on 箱庭</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://toppers.github.io/hakoniwa/index.xml" rel="self" type="application/rss+xml"/><item><title>技術的背景</title><link>https://toppers.github.io/hakoniwa/docs/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/docs/background/</guid><description>IoT (Internet of Things) は，情報技術の総合格闘技と言えます．
IoTシステムは，多様かつ大量の情報機器が，ネットワーク通信を介して密接に絡み合っています． 様々な技術分野から多くの技術者が集まり，みんなで英知を結集してIoTシステムを構築する必要があります．
例えば自動運転システムの例を考えてみましょう．このように様々な技術領域を横断しています．
組込み系 自動運転の判断処理を実現するソフトウェアの開発 ECU間の通信機構の開発 制御系 メカやエレキを制御するECUハードウェアの開発 IT・ネットワーク系 Web UI・スマホアプリケーションの開発 ビッグデータの統計処理を担うクラウドサーバの管理・保守 車車間・機器間の効率的な通信制御の実現 アプリケーション系 配車管理や交通流管理アプリの開発 このようなIoTシステムを構築する際の課題として，下記が考えられます．
問題発生経路の複雑化 全体結合しないと見えない問題が多数潜んでいる 様々な機器間の整合性を取れない 原因調査の複雑化 どこで何がおこっているのか調査困難 そもそもデバッグすること自体が難しい 実証実験のコスト増 実証実験は手軽に実施できない 各分野のエンジニアの総動員 手間，時間，費用がかかる 次に，ロボットを活用したIoTサービスの構築時に起こりえる課題を考えてみましょう．
ロボットをどう組み合わせると，効果的な新しいサービスを創出できるかわからない 新しいサービスを検討するにしても，実物のロボットでは準備・手間がかかりすぎる 頻繁に変更されるシステム要件に対して，変更適用に時間がかかる 実証実験時には結合トラブルが頻発する 「箱庭」は，このような技術的課題を解決し，IoTのシステム開発／サービス構築を加速化することができるプラットフォームとなること目指します．</description></item><item><title>コンセプト</title><link>https://toppers.github.io/hakoniwa/docs/concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/docs/concept/</guid><description>箱庭のコンセプトは 「箱の中に，様々なモノをみんなの好みで配置して，いろいろ試せる！」 です．
IoTや自動運転システム，クラウドロボティクスシステムを開発する際に，仮想環境である箱庭上に様々なソフトウェアやサービスを持ち寄って，机上で実証実験できる場を提供します．
想定している利用シーンは，多様な分野から技術者が集まるIoTシステムの開発現場です． IoTの各要素が連携される複雑なシステムの事象や状態を，「箱」の中ではシナリオに応じた同じ挙動が再現されるようにします． そして，箱庭のシステム構成要素である「アセット」を差し替えることで，検証の対象／抽象度／レベルを任意に変更することができます． また，システム環境の視点（評価観点）や抽象度を，各技術者の分野や立場に応じて切り替えられるようにします．
なお箱庭の語源は，名園や山水を模したミニチュアの庭園に由来します． 盆景や盆栽に類するもので，江戸時代後半から明治時代にかけて流行したといわれています．</description></item><item><title>目指すところ</title><link>https://toppers.github.io/hakoniwa/docs/aimat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/docs/aimat/</guid><description>大規模かつ複雑なIoTシステムを開発／提供する技術者のための シミュレーション環境とエコシステム を構築することを目指しています．
Figure: 箱庭のエコシステム 箱庭のターゲットは，様々な機器がネットワークで接続された情報システムです． 自動運転や物流，宇宙分野など，IoTの様々な分野を想定しています．
箱庭は，次の利用者のための環境です．
システム開発者：IoTシステムとその構成要素を開発する技術者 サービス提供者：IoTを活用してシステムサービスの提供を進める技術者 箱庭アセットの開発者および提供者 アセットとは，箱庭のシステム構成要素のことを指します． 箱庭プロジェクトの目指す強みと新しさとしては，IoTの各要素である箱庭アセットをそれぞれ連携させて，対象システムを任意の精度で検証可能とすることです． そして，箱庭の利用者の技術領域や評価対象に応じて，アセットを差し替えることで，検証の対象／抽象度／レベルを任意に変更できるようにします．</description></item><item><title>コア技術</title><link>https://toppers.github.io/hakoniwa/docs/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/docs/core/</guid><description>箱庭の核となるカーネルは，次の4種類であると考えています．
スケジューリング 同期・通信 時間管理 アセット管理 また，箱庭コア機能が備えるべき重要な機能特性は，次のものがあると考えています．
コンポーネント化 可視化 イベント駆動化 自動化 箱庭のコア機能と機能特性については，プロトタイプモデルの開発を進めながら，WG内での設計検討を続けているところです． 詳細が固まりましたら，追って解説を加えていきます．</description></item><item><title>技術要素</title><link>https://toppers.github.io/hakoniwa/docs/technical/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/docs/technical/</guid><description>TOPPERSカーネル TOPPERSプロジェクトにより開発されている，μITRON4.0仕様のスタンダードプロファイルを拡張した，オープンソースのリアルタイムカーネルです． 主な適用対象は，高い信頼性・安全性・リアルタイム性を要求される組込みシステムです．
Athrill 箱庭の核である，CPU命令セットシミュレータです． 箱庭WGメンバが中心となって開発を進めています．組込みマイコンおよびペリフェラルの挙動を命令レベルでデバッグ・機能検証することができます．現在はV850/RH850およびARMv7-Aが主なサポート対象です．
TOPPERSライセンスのもと，オープンソースで開発を進めています．
https://github.com/toppers/athrill mROS ROS(ROS1)の組込み向け軽量実行環境です．ホストPC上のROSマスタおよびROSノードに対する，組込みマイコンからの出版購読型通信を実現します．京都大学情報学研究科 高木研究室が中心となって開発を進めています． ROS・マルチECUロボット向けプロトタイプモデルのようなシステムでの活用を想定しています．
https://github.com/tlk-emb/mROS RDBOX RDBOX (Robotics Developers BOX)は，ROSロボットやIoTに最適化した，Kubernetesクラスタとセキュアで拡張性の高いWi-Fiネットワークを自動構築するためのフレームワークです．シミュレーション環境と現実の作業環境をブリッジすることを目指しています．株式会社インテックのRDBOX Projectで開発されています． ロボット間協調動作向けプロトタイプモデルの構築において，箱庭との連携を進めています．
https://github.com/rdbox-intec/rdbox Unity リアルタイム3D開発プラットフォームです．IDEを内蔵するゲームエンジンとして有名です． 箱庭では，物理演算エンジンと空間可視化のために活用しています．
https://unity.com/ 箱庭WGでは，この他にも，IoT／クラウドロボティクス時代の仮想環境を確立するために，統合すべき技術要素を模索しているところです．
シナジーが生まれそうな技術や，活用できそうな知見をお持ちの方がいましたら，ぜひお知らせください．
注： このウェブページは，ユニティ テクノロジーズまたはその関連会社がスポンサーとなったり，ユニティ テクノロジーズまたはその関連会社と提携しているものではありません． このサイトに掲載された Unity の登録商標一覧に含まれる Unity の登録商標はすべて，ユニティ テクノロジーズまたはその米国や他の国々に所在する関連会社の登録商標または商標です．</description></item><item><title>ロードマップ</title><link>https://toppers.github.io/hakoniwa/docs/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/docs/roadmap/</guid><description>箱庭は 「でっかく語って少しずつ育てて」 います．
現在のプロジェクトの活動の中心としては，コンセプトの実現と技術研鑽のためにプロトタイプモデルを構築中です． これらの研究開発は，すべてOSSとして公開しながら進めていきます． 皆さまにそれぞれのプロトタイプモデルをご利用いただき，そしてフィードバックを得ながら，箱庭コア技術の成熟と様々な機能拡充を進めていきたいと考えています．
箱庭プロジェクトは，まずは教育用途でのパッケージ構築と普及を図っていますが，製品開発への展開も視野に入れて研究開発を進めています． 壮大な構想を掲げていますが，全くマンパワーは足りていないのが実情です． 箱庭の成長のためにも，特にクラウド技術や可視化アセット開発に知見をお持ちの方に参画いただきたいと考えています．
箱庭WGの狙いや趣旨にご賛同いただける方の参画をお待ちしています． 活動としては，月１回のオンラインでの定例会合と、年２回の技術検討合宿を実施しています． また，日常的な議論や情報共有と開発にはSlack，GitHubおよびGoogle Driveを活用しています．
Slack等での議論に参加したい方，活動内容へのご要望をお持ちの方，コア技術や各アセットの開発などに参加したい方， 箱庭WGの活動で期待される技術成果を活用したい方，製品開発に展開してみたい方， ぜひとも問合せ先よりご連絡ください．</description></item><item><title>単体ロボット向け</title><link>https://toppers.github.io/hakoniwa/prototypes/single-robot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/prototypes/single-robot/</guid><description>単体のSBCで構成される単体ロボットを対象とした箱庭プロトタイプモデルです．ETロボコンを題材としています．
組込みマイコン上のプログラムの振る舞いを，ロボット上の挙動と連携させて検証を進めることができます．
技術研鑽視点での狙い 物理シミュレータとマイコンシミュレータ間の連携方法の検討 異なるシミュレータ間の時間同期の検討 その他の狙い ETロボコンユーザ層に箱庭を広める（広報活動） 導入方法と使用方法 最小の構成と手順で単体ロボット向けシミュレータを試行できるパッケージを，下記のGitHubリポジトリで公開しています．ぜひ試してみてください．
toppers/hakoniwa-single_robot: 箱庭プロトタイプモデルA：単体ロボット向けシミュレータ 動作例のデモ 謝辞・特記事項： Unityパッケージの設計と作成にあたっては，宝塚大学 東京メディア芸術学部 吉岡章夫准教授および学部生の杉﨑涼志さん，木村明美さん，千葉純平さんにご協力いただきました．
HackEVのUnityアセットは，ETロボコン実行委員会より提供いただいたデータを基に作成しています．実行委員会の皆さまに深く感謝いたします．
ただし本アセットはETロボコンの本番環境とは異なりますので，大会に参加予定の方はご注意ください．また，本アセットは，個人利用または教育利用に限定してご利用ください．</description></item><item><title>ROS・マルチECUロボット向け</title><link>https://toppers.github.io/hakoniwa/prototypes/multi-robot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/prototypes/multi-robot/</guid><description>複数のECUで構成されるシステムや，FPGAやGPUを混載したシステムを対象とした箱庭プロトタイプモデルです． このようなヘテロ環境を机上で検証できるようにすることを目指しています． また，アセット間の通信処理の可視化技術の実現も目指しています．
技術研鑽視点での狙い マルチECU/FPGA/GPU間の連携方法検討（シミュレーション時間同期等） 箱庭アセット間の通信可視化方法の検討（ROS/ROS2連携含む） 箱庭アセットの仕組み検討 その他の狙い ROSユーザ層に箱庭を広める（広報活動） 各種コンテストへの挑戦（つくばチャレンジ／FPGAデザインコンテスト) 現在，本プロトタイプモデルの実現に向けて鋭意開発中です．公開までしばしお待ちください．</description></item><item><title>ロボット間協調動作向け</title><link>https://toppers.github.io/hakoniwa/prototypes/harmony-robot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/prototypes/harmony-robot/</guid><description>クラウドとロボティクスとの連携を目指した箱庭プロトタイプモデルです．
技術研鑽視点での狙い クラウド連携方法検討 ロボット間の連携方法検討（より複雑なロボットの動き/干渉に挑戦） 箱庭アセットを増やす仕組みの検討 その他の狙い RDBOX連携（開発支援仮想環境としての箱庭の実績作り） RDBOXユーザ層に箱庭を広める（広報活動） 現在，本プロトタイプモデルの実現に向けて鋭意開発中です．公開までしばしお待ちください．</description></item><item><title>リポジトリ一覧</title><link>https://toppers.github.io/hakoniwa/repositories/</link><pubDate>Wed, 26 Aug 2020 15:09:42 +0900</pubDate><guid>https://toppers.github.io/hakoniwa/repositories/</guid><description>箱庭本体 略称・リンク 概要 備考 hakoniwa 全般的なサポート対応と本Webサイトのコンテンツ管理のためのリポジトリ hakoniwa-single_robot 箱庭プロトタイプモデルA：単体ロボット向けシミュレータを最小の構成・手順で試行できるパッケージ hakoniwa-core 箱庭コア機能の試作開発用リポジトリ Athrill 略称・リンク 概要 備考 athrill Athrill本体(ターゲット非依存部) athrill-device 外部デバイス連携のためのgRPCライブラリ athrill-target-v850e2m Athrill V850E2Mターゲット依存部 athrill-target-ARMv7-A Athrill ARMv7-Aターゲット依存部 athrill-target-rh850f1x Athrill RH850F1xターゲット依存部 athrill-gcc-v850e2m Athrill V850E2Mターゲット対応のgccパッケージ TOPPERS kernel 略称・リンク 概要 備考 ev3rt-athrill-v850e2m TOPPERS/EV3RTプラットフォームのAthrill向けV850E2M版 ASP3カーネルを代用 ev3rt-athrill-ARMv7-A TOPPERS/EV3RTプラットフォームのAthrill向けARMv7-A版 ASP3カーネルを代用 asp-athrill-mbed Athrill向けTOPPERS/ASPカーネルとmbedライブラリのパッケージ Unity 略称・リンク 概要 備考 hakoniwa-Unity-Package 箱庭向けのUnityアセット・パッケージ mROS 略称・リンク 概要 備考 mROS 組込みデバイス向けROS 1ノード軽量実行環境 Samples 略称・リンク 概要 備考 hakoniwa-scenario-samples 箱庭の動作シナリオのサンプル集</description></item><item><title>SNS・問合せ先</title><link>https://toppers.github.io/hakoniwa/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/contact/</guid><description>箱庭の活動への参画のお誘い 箱庭WGの狙いや趣旨にご賛同いただける方の参画をお待ちしています。 Slack等での議論に参加したい方、活動内容へのご要望をお持ちの方、コア技術や各アセットの開発などに参加したい方、 箱庭WGの活動で期待される技術成果を活用したい方、製品開発に展開してみたい方、 ぜひともお声がけください。
箱庭フォーラム：利用方法について質問したり、技術的な相談をしたい 箱庭に関わる開発者や技術者、ユーザのためのSNSになることを目指して、GitHub Discussionsを運用しています。
箱庭プロトタイプモデルの導入・利用にあたって不明な点や技術的な質問（Athrillを含む要素技術単体に関する質問も歓迎）や、箱庭の活用方法のアイデアや関係する全般的な話題の提供も歓迎します。
次のカテゴリを用意していますので、適切と思われるものを選択して投稿してください。
Announcements: 箱庭メンバからの最新情報のお知らせ General: 箱庭や要素技術に関する全般的な話題の提供 a.k.a 雑談場所 Idea&amp;amp;Request: 箱庭こう使えない？こう使いたい！のアイデアを話し合いましょう Inquiry: 箱庭WGへの関する問合せや活動参画の希望など（技術的な質問は&amp;quot;Q&amp;amp;A&amp;quot;をご利用ください） Q&amp;amp;A: 技術的な質問（Athrillを含む要素技術単体に関する質問も歓迎！箱庭プロトタイプモデルの試用で発生したトラブルなどお知らせください） WGメンバとして参画したい 箱庭WGは、TOPPERSプロジェクトのワーキンググループとして活動しています。
箱庭WGのメンバに加入される場合は、原則としてTOPPERSプロジェクトへの入会もお願いしています。 また、TOPPERSプロジェクト会員向けの限定イベントの開催や、箱庭WG活動成果の早期公開なども検討しています。
箱庭WGへの活動の参画希望や、TOPPERSプロジェクトの加入方法の詳細については、
TOPPERSプロジェクト事務局にお問い合わせください。
NPO法人 TOPPERSプロジェクト 〒103-0011 東京都中央区日本橋大伝馬町6-7　住長第2ビル3F （一社）組込みシステム技術協会内 TEL &amp;amp; FAX: 03-5643-5166 Email: secretariat_at_toppers.jp (_at_ を@ に置き換えてください) WGの主なメンバと役割 氏名 主な役割 所属 SNS 森 崇 主査 全体統括、Athrill 永和システムマネジメント 高瀬 英希 mROS、ROS、IoT 東京大学/JSTさきがけ 細合 晋太郎 IDE、モデリング、可視化、クラウド チェンジビジョン 高田 光隆 カーネル、応用検討 名古屋大学NCES 庭野 正義 車載コンポーネント、クラウド、IDE アイコムシステック 福田 ⻯也 クラウド、ロボティクス インテック 小森 顕博 可視化 ※許諾の得られている方のみ掲載しています。</description></item><item><title>シミュレーションに関するチューニング</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/02_changed_params/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/02_changed_params/</guid><description>変更可能なパラメータ EV3のパラメータについて 今回のシミュレーション環境(Unity側)にはいくつかパラメータがありますので，その説明を行います．
まず，パラメータを参照するには，Hierarchyビューで，「EV3」を選択してください(下図)．
すると，InspectorビューにEV3のパラメータが表示されます．
以下，変更可能なパラメータを説明します(説明されていないものは変更しないでください)． ※これらのパラメータは，シミュレーション実行時に動的に変更も可能なものもあります．
EV3 Actuator(Script) Port(動的変更不可) Unity側のUDP受信ポート番号です．デフォルトでは54001です．
この値を変更する場合は，athrill側のパラメータ定義ファイル(device_config.txt)の以下も変更してください．
DEBUG_FUNC_VDEV_TX_PORTNO 54001 device_config.txt は，app.cと同じフォルダにあります．
EV3 Sensor(Script) Host(動的変更不可) Athrillの配置マシンのIPアドレスです． Unityと同じマシン上に配置する場合は，デフォルト値のままで良いです．
マシン負荷が高く，athrillとUnityを別マシンで動かす場合は，このIPアドレスを変更して対応ください．
Port(動的変更不可) Athrill側のUDP受信ポート番号です．デフォルトでは54002です．
この値を変更する場合は，athrill側のパラメータ定義ファイル(device_config.txt)の以下も変更してください．
DEBUG_FUNC_VDEV_RX_PORTNO 54002 device_config.txt は，app.cと同じフォルダにあります．
EV3 Motor(Script) Power Const(動的変更可) EV3のモータのパワーです．デフォルトで40としていますが，値を変更できます．
ただ，あまり大きい値を設定しすぎるとUnity側の問題か，物理的にありえないのかよくわかりませんが，EVロボットが吹っ飛びますので，ご注意ください．．．
照明のON/OFFについて 今回のデモでは，照明を３個用意しています．
全体照明１個 Directional Light スポットライト２個 Spot Light1 Spot Light2 それぞれの照明はシミュレーション実行時にON/OFFできます． ON/OFFのさせ方は単純で，HierachyビューでON/OFFしたいライトを選択します．
すると，Inspectorビューに下図のように「Light」のチェックボックスが見えます． このチェックボックスを外せばOFFになります．
カラーセンサの状態 パラメータではないですが，カラーセンサの認識している状態を知りたくなることがあるかと思います． そのため，カラーセンサの認識している値をUnityのパラメータ表示機能を利用して可視化しています．
参照するには，下図のようにHierarchyビューでColorSensorを選択してください．</description></item><item><title>シミュレーションに関するチューニング</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/02_changed_params_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/02_changed_params_v2.0/</guid><description>single-robot-HackEV(v2.0)の追加要素について Hakoniwaクラスの追加 single-robot-HackEV(v2.0) ではHakoniwaクラスが設けられました．
Hakoniwaクラスはシミュレーション環境全体に関わる情報を持っています．
主なフィールド 説明 Max Diff Time athrillとUnityのシミュレーション時間の最大許容誤差時間 Dbg Diff Time Msec 現在のathrillとUnityのシミュレーション時間の誤差(msec) Robotの配置方法 single-robot-HackEV(v2.0)ではあらかじめ用意されたいくつかのロボットモデルを
ユーザの方が任意に配置することが出来ます．
Project/Prefabs配下にいくつかのロボットモデルを用意しています． これらのロボットモデルをHierarchyビューのRobot配下にドラッグ＆ドロップすることで 簡単に配置することができます．
変更可能なパラメータ Robot のパラメータについて 超音波センサ Ultrasonic SensorのDistance Valueでセンサ範囲を調整できます．
モーター RigidbodyのMassでタイヤの重さを，Angular Dragで回転時の抵抗値を調整できます．
カラーセンサ Physical CameraのSensor Sizeでセンシング範囲を調整できます．</description></item><item><title>ショーケース</title><link>https://toppers.github.io/hakoniwa/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/showcase/</guid><description>「箱庭」コンセプトムービー2021 2021年6月時点での箱庭の成果物で実現できることを、デモ動画としてまとめました。
このページの先頭に戻る
シミュレーション環境：箱庭を使ったROSロボットのCI（継続的インテグレーション） クラウドネイティブ環境上に構築した「箱庭」と合わせて、コミュニティ版GitLab（MIT Licence）が提供する、ソースコード管理機能及び、CI Runner機能を使ってCI（Continuous Integration，継続的インテグレーション）を実現しています。
クラウドネイティブ環境はOSSであるRDBOX（Robotics Developer BOX）を使って構築しています。
このページの先頭に戻る
MONOistでの連載 モノづくりスペシャリストのための情報ポータル「MONOist」に連載記事を寄稿しています。「仮想環境を使ったクラウド時代の組み込み開発のススメ」という連載タイトルにて、箱庭の活動を織り交ぜながらこれからのIoTシステム開発の姿を紹介していきます。ぜひご覧ください。
第1回「IoTシステムの開発はなぜ難しいのか、ITと組み込みの相克を克服せよ」 (2021年05月25日 10時00分 公開) 第2回「日本の伝統を受け継ぐ仮想環境「箱庭」でIoTシステムの統合開発を加速する」 (2021年06月28日 10時00分 公開) 第3回「組み込みエンジニアも知っておきたい「クラウドネイティブ」とは」 (2021年07月28日 10時00分 公開) 第4回「クラウドネイティブで実現する、シミュレーションと実機テストのボーダーレス開発」 (2021年08月30日 10時00分 公開) このページの先頭に戻る
Unity開発事例集 ユニティ・テクノロジーズ・ジャパン株式会社のWebページ「Unityを活用した開発事例 | Unity for Industry」において、箱庭の単体ロボット向けシミュレータが取り上げられています。
「MANUFACTURE 製造分野でのUnity開発事例」の項目をご覧ください。
このページの先頭に戻る</description></item><item><title>単体ロボット向けシミュレータ使用手順(ARM版)</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_arm/</guid><description>単体ロボット向けシミュレータ使用手順(ARM版) 使用手順 環境変数の設定(Mac版のみ) cfgフォルダの配置(初回起動時のみ) EV3ロボット制御プログラムのビルド Unityのシミュレータの起動 athrillの起動 環境変数の設定(Mac版のみ) Mac版の場合，gccインストールフォルダの環境変数の設定が必要になります．
export GCC_PATH=&amp;lt;gccインストールフォルダ&amp;gt;/gcc-arm-none-eabi-9-2019-q4-major cfgフォルダの配置(初回起動時のみ) cfg ファイルの配置(Mac版の場合)
$ pwd &amp;lt;インストールフォルダ&amp;gt;/ev3rt-athrill-ARMv7-A $ mkdir cfg/cfg $ cp cfg/cfg-mac cfg/cfg/cfg $ chmod +x cfg/cfg/cfg cfg ファイルの配置(Windows\Linux版の場合)
$ pwd &amp;lt;インストールフォルダ&amp;gt;/ev3rt-athrill-ARMv7-A $ mkdir cfg/cfg $ cp cfg/cfg-linux-64 cfg/cfg/cfg $ chmod +x cfg/cfg/cfg EV3ロボット制御プログラムのビルド ターミナル上で，ev3rt-athrill-ARMv7-A/sdk/OBJ1.1に移動して，
EV3ロボット制御プログラムをビルドしましょう．
ビルドするには，以下のコマンドを実行してください．
make clean;make ビルド成功すると，asp というバイナリができます．
$ ls asp asp Unityのシミュレータの起動 ※必ず，athrillの起動より先にUnityのシミュレータの起動を行ってください
次に，Unityをシミュレーションモードにします． Unityの画面上で　ボタンを押下してください．
成功すると，下図のような画面に切り替わります．(画像は single-robot-HackEV.unitypackage の場合)</description></item><item><title>単体ロボット向けシミュレータ使用手順(ARM版)</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_arm_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_arm_v2.0/</guid><description>単体ロボット向けシミュレータ使用手順(ARM版) 使用手順 環境変数の設定(Mac版のみ) cfgフォルダの配置(初回起動時のみ) EV3ロボット制御プログラムのビルド Unityのシミュレータの起動 athrillの起動 環境変数の設定(Mac版のみ) Mac版の場合，gccインストールフォルダの環境変数の設定が必要になります．
export GCC_PATH=&amp;lt;gccインストールフォルダ&amp;gt;/gcc-arm-none-eabi-9-2019-q4-major cfgフォルダの配置(初回起動時のみ) cfg ファイルの配置(Mac版の場合)
$ pwd &amp;lt;インストールフォルダ&amp;gt;/ev3rt-athrill-ARMv7-A $ mkdir cfg/cfg $ cp cfg/cfg-mac cfg/cfg/cfg $ chmod +x cfg/cfg/cfg cfg ファイルの配置(Windows\Linux版の場合)
$ pwd &amp;lt;インストールフォルダ&amp;gt;/ev3rt-athrill-ARMv7-A $ mkdir cfg/cfg $ cp cfg/cfg-linux-64 cfg/cfg/cfg $ chmod +x cfg/cfg/cfg EV3ロボット制御プログラムのビルド ターミナル上で，ev3rt-athrill-ARMv7-A/sdk/OBJ1.1に移動して，
EV3ロボット制御プログラムをビルドしましょう．
ビルドするには，以下のコマンドを実行してください．
make clean;make ビルド成功すると，asp というバイナリができます．
$ ls asp asp Unityのシミュレータの起動 ※必ず，athrillの起動より先にUnityのシミュレータの起動を行ってください
次に，Unityをシミュレーションモードにします． Unityの画面上で　ボタンを押下してください．
成功すると，下図のような画面に切り替わります．(画像は single-robot-HackEV.unitypackage の場合)</description></item><item><title>単体ロボット向けシミュレータ使用手順(V850版)</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_v2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_v2.1/</guid><description>単体ロボット向けシミュレータ使用手順 V2.1での変更点について v2.1 で，Unityでのシミュレーション実行をビルドしてバイナリ実行できるようになりました．
バイナリ実行でシミュレーション実行を行う場合，
Unityシミュレーションの実行， athrillの実行 をひとまとめにして実行することができます．
なお，従来の使用方法でもシミュレーションを実行することは可能ですので，
その場合は下記をご参照いただき，使用してください．
V850版 ARM版 これ以降は，バイナリ実行を行うための手順の紹介となります．
使用手順 ビルド設定 ビルドの実行，config.jsonの配置 シミュレーションの実行 ビルド設定 ビルドを実施する前に，バイナリ実行時のウィンドウサイズに関する設定を行います．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Player」
Resolution and PresentationのFullscreen Mode をWindowedと設定します． その下の詳細なウィンドウサイズは基本そのままでもよいですが，サイズを変更したい場合は，
お使いの環境に合わせて変更してください．
ビルドの実行，config.jsonの配置 設定が完了したら，Unityプロジェクトのビルドを行います．
Unity のメニューから，「File」⇒「Build Settings」を選択します．
Platform は[PC,Mac &amp;amp; Linux Standalone]のままとします．
Architectureは実行するPCのアーキテクチャに合わせて設定しますが，
どちらか分からないという方は，x86_64を選択してください．
設定を終えたら，Buildを押下してビルドを実行します．
すると，どの場所にビルドしたバイナリを配置するか，選択ダイアログが表示されますので， 任意の場所を選択します．
今回は例として，ビルドするUnityプロジェクトのあるフォルダ内に，Buildフォルダを作成し，
その中にビルドしたバイナリを配置するようにします．
フォルダを選択すると，ビルドが実行されます．
ビルドが完了したら，バイナリが出力されたフォルダ(今回の例ではBuildフォルダ)内に
先ほど，Unityプロジェクトフォルダ配下に配置したconfig.jsonをコピーします．
制御アプリのビルド シミュレーションの実行の前に制御アプリのビルドを行います．</description></item><item><title>単体ロボット向けシミュレータ使用手順(V850版)</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_v850/</guid><description>単体ロボット向けシミュレータ使用手順(V850版) 使用手順 EV3ロボット制御プログラムのビルド Unityのシミュレータの起動 athrillの起動 EV3ロボット制御プログラムのビルド ev3rt-athrill-v850e2m/sdk/workspace に移動して，
EV3ロボット制御プログラムをビルドしましょう．
ビルドするには，以下のコマンドを実行してください．
$ make img=＜アプリケーションフォルダ名＞ clean $ make img=＜アプリケーションフォルダ名＞ 例：line_traceというアプリケーションフォルダのプログラムをビルドする場合
$ make img=line_trace clean $ make img=line_trace ビルド成功すると，asp というバイナリができます．
$ ls asp asp Unityのシミュレータの起動 ※必ず，athrillの起動より先にUnityのシミュレータの起動を行ってください
次に，Unityをシミュレーションモードにします． Unityの画面上で　ボタンを押下してください．
成功すると，下図のような画面に切り替わります．(画像は single-robot-HackEV.unitypackage の場合)
athrillの起動 最後に，athrillを起動しましょう．
ev3rt-athrill-v850e2m/sdk/workspace/＜アプリケーションフォルダ＞に移動して，以下のコマンドを実行してください．
UDP版の場合
$ athrill2 -c1 -t -1 -m memory.txt -d device_config.txt ../asp MMAP版の場合
$ athrill2 -c1 -t -1 -m memory_mmap.txt -d device_config_mmap.txt .</description></item><item><title>単体ロボット向けシミュレータ使用手順(V850版)</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_v850_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/01_usage_v850_v2.0/</guid><description>単体ロボット向けシミュレータ使用手順(V850版) 使用手順 EV3ロボット制御プログラムのビルド Unityのシミュレータの起動 athrillの起動 EV3ロボット制御プログラムのビルド ev3rt-athrill-v850e2m/sdk/workspace に移動して，
EV3ロボット制御プログラムをビルドしましょう．
ビルドするには，以下のコマンドを実行してください．
$ make img=＜アプリケーションフォルダ名＞ clean $ make img=＜アプリケーションフォルダ名＞ 例：line_traceというアプリケーションフォルダのプログラムをビルドする場合
$ make img=line_trace clean $ make img=line_trace ビルド成功すると，asp というバイナリができます．
$ ls asp asp Unityのシミュレータの起動 ※必ず，athrillの起動より先にUnityのシミュレータの起動を行ってください
次に，Unityをシミュレーションモードにします． Unityの画面上で　ボタンを押下してください．
成功すると，下図のような画面に切り替わります．(画像は single-robot-HackEV.unitypackage の場合)
athrillの起動 最後に，athrillを起動しましょう．
ev3rt-athrill-v850e2m/sdk/workspace/＜アプリケーションフォルダ＞に移動して，以下のコマンドを実行してください．
UDP版の場合
$ athrill2 -c1 -t -1 -m memory.txt -d device_config.txt ../asp MMAP版の場合
$ athrill2 -c1 -t -1 -m memory_mmap.txt -d device_config_mmap.txt .</description></item><item><title>単体ロボット向けシミュレータ使用方法</title><link>https://toppers.github.io/hakoniwa/single-robot-usage/single-robot-usage-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-usage/single-robot-usage-index/</guid><description>単体ロボット向けシミュレータ使用方法 使用手順詳細 single-robot-HackEV(v2.1)を使用している場合(Windows, Mac向け) 使用しているUnityパッケージが single-robot-HackEV(v2.1) の場合は，
こちらの使用手順をご参照ください．
使用手順 シミュレーションに関わるチューニングについてはこちらをご参照ください．
チューニングについて(single-robot-HackEV(v2.0)を使用している場合) single-robot-HackEV(v2.0)を使用している場合 使用しているUnityパッケージが single-robot-HackEV(v2.0) の場合は，
こちらの使用手順をご参照ください．
V850版 ARM版 シミュレーションに関わるチューニングについてはこちらをご参照ください．
チューニングについて(single-robot-HackEV(v2.0)を使用している場合) single-robot-HackEV または ev3rt-simple-robotを使用している場合 使用しているUnityパッケージが single-robot-HackEV または ev3rt-simple-robot の場合は，
こちらの使用手順をご参照ください．
V850版 ARM版 シミュレーションに関わるチューニングについてはこちらをご参照ください．
チューニングについて</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/10_wsl_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/10_wsl_install/</guid><description>WSLのインストール Windows版の場合はWSLをインストールいただく必要があります．
※注意点として，現時点(2020/6月)時点では，WSL2はご利用いただけません(WSL2とUnity間でUDP通信できないため)．
WSLのインストール方法は色々なサイトで紹介されておりますので，Ubuntu 18.04 LTSをインストールください．
以下のサイト等が参考になるかと思います．
https://qiita.com/Aruneko/items/c79810b0b015bebf30bb インストールが完了したら，aptパッケージを更新しておきます．
(更新しないと後ほど行うgccのインストールで失敗することがあるためです)
$ sudo apt update
aptパッケージを更新したら，あらかじめ以下が使用できるようにインストールしておきます
gcc make $ sudo apt install build-essential</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_mac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_mac/</guid><description>Rubyのインストール v850版をご利用される場合は，RTOSがASP3になりますので，Rubyをインストールいただく必要があります． ※EV3ロボット制御アプリをビルドする際に必要となります．
Homebrewを使用してインストールします．
$ brew install ruby</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_win_linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_win_linux/</guid><description>Rubyのインストール v850版をご利用される場合は，RTOSがASP3になりますので，Rubyをインストールいただく必要があります． ※EV3ロボット制御アプリをビルドする際に必要となります．
$ sudo apt install ruby</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_arm/</guid><description>athrill2のインストール athrill2のインストール手順 athrill のチェックアウト athrill-target のチェックアウト コンパイラのインストール ビルド＆インストール athrill のチェックアウト athrill は，設計上，CPUアーキに依存しない共通コードとCPU依存するコードを分離しています．
共通コードのチェックアウトは，以下の通りです．
$ git clone https://github.com/toppers/athrill.git
athrill-target のチェックアウト CPUアーキに依存するコードは，athrill-target側で管理しています． 今回のARM対応版は，ここにあります．
$ git clone https://github.com/toppers/athrill-target-ARMv7-A.git
なお，athrill と athrill-targetを以下のフォルダ構成にしてください．
.
├── athrill
└── athrill-target-ARMv7-A
コンパイラのインストール Linux の方は，gcc をインストールください．
Windows の方は，WSL上で gcc をインストールください．
Mac の方は，clang をインストールください．
ビルド＆インストール ビルド方法ですが，端末上でathrill-target-ARMv7-A に移動してください．
Linux/Windowsの方は，さらに build_linux に移動してください．
Macの方は，build_mac に移動してください．
移動終わったら，以下コマンド実行するだけです．
make timer32=true clean
make timer32=true
ビルド成功すると，athrill側の bin/linux 配下に athrill2 というバイナリが配置されるはずです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_v850/</guid><description>athrill2のインストール athrill2のインストール手順 athrill のチェックアウト athrill-target のチェックアウト コンパイラのインストール ビルド＆インストール athrill のチェックアウト athrill は，設計上，CPUアーキに依存しない共通コードとCPU依存するコードを分離しています．
共通コードのチェックアウトは，以下の通りです．
$ git clone https://github.com/toppers/athrill.git
athrill-target のチェックアウト CPUアーキに依存するコードは，athrill-target側で管理しています．
今回のV850対応版は，ここにあります．
$ git clone https://github.com/toppers/athrill-target-v850e2m.git
なお，athrill と athrill-targetを以下のフォルダ構成にしてください．
.
├── athrill
└── athrill-target-v850e2m
コンパイラのインストール Linux の方は，gcc をインストールください．
Windows の方は，WSL上で gcc をインストールください．
Mac の方は，clang をインストールください．
ビルド＆インストール ビルド方法ですが，端末上でathrill-target-v850e2m に移動してください．
Linux/Windowsの方は，さらに build_linux に移動してください．
Macの方は，build_mac に移動してください．
移動終わったら，以下コマンド実行するだけです．
make timer32=true clean
make timer32=true
ビルド成功すると，athrill側の bin/linux 配下に athrill2 というバイナリが配置されるはずです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_arm/</guid><description>linux版64bit gccコンパイラ(ライブラリ含む)のインストール ARM版のathrill2を利用される場合は，以下のサイトを参考にコンパイラおよびライブラリをインストールください．
Windows(WSL)
https://www.yokoweb.net/2018/03/07/wsl-ubuntu-arm-gcc/ Linux
https://www.yokoweb.net/2018/05/16/ubuntu-18_04-gcc-arm-install/ Mac
https://www.yokoweb.net/2018/05/16/macos-gcc-arm-brew-install/</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_v850/</guid><description>linux版64bit gccコンパイラ(ライブラリ含む)のインストール v850版のathrill2を利用される場合は，以下のサイトからコンパイラおよびライブラリ(athrill-gcc-package.tar.gz)をダウンロードください．
https://github.com/toppers/athrill-gcc-v850e2m/releases/tag/v1.1 $ tar xzvf athrill-gcc-package.tar.gz
$ cd athrill-gcc-package/
$ tar xzvf athrill-gcc.tar.gz
$ ls usr/local/athrill-gcc/
bin include lib libexec share v850-elf
解凍後，usr/local/athrill-gccを /usr/local 直下に移動してください．
$ sudo mv usr/local/athrill-gcc /usr/local
あとは，.bashrc に以下のパスを設定するだけです．
export PATH=/usr/local/athrill-gcc/bin/:${PATH}
export LD_LIBRARY_PATH=/usr/local/athrill-gcc:/usr/local/athrill-gcc/lib:${LD_LIBRARY_PATH}
設定後は，パスの有効化を忘れずに行ってください．
source ${HOME}/.bashrc</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_arm/</guid><description>箱庭用 EV3RT 開発環境のダウンロード 任意のフォルダ上で，athrillサンプル(athrill-sample)のプログラムを git clone してください．
なお，cloneする場所は，以下のように athrillと同じフォルダ階層で実施してください．
|---athril
|---athrill-target-ARMv7-A
└---ev3rt-athrill-ARMv7-A
clone方法は以下の通りです．
$ git clone https://github.com/toppers/ev3rt-athrill-ARMv7-A.git</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_v850/</guid><description>箱庭用 EV3RT 開発環境のダウンロード 任意のフォルダ上で，athrillサンプル(athrill-sample)のプログラムを git clone してください．
なお，cloneする場所は，以下のように athrillと同じフォルダ階層で実施してください．
|---athril
|---athrill-target-v850e2m
└---ev3rt-athrill-v850e2m
clone方法は以下の通りです．
$ git clone https://github.com/toppers/ev3rt-athrill-v850e2m.git
サンプルアプリケーションのダウンロード 2種類のサンプルアプリケーションを用意しています．
こちらから git clone いただき，hakoniwa-scenario-samples/single-robot配下の全てのフォルダを
ev3rt-athrill-v850e2m/sdk/workspace に配置ください．
$ git clone https://github.com/toppers/hakoniwa-scenario-samples.git</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_arm/</guid><description>EV3ロボット制御プログラム 現時点の制御プログラムの開発フォルダは以下のフォルダで，制御プログラムは app.c です．
※まだ暫定構成です．
ARM版のathrill2を利用される場合は，以下のフォルダで作業してください．
$ ls ev3rt-athrill-ARMv7-A/sdk/OBJ1.1/
app.c app.h device_config_mmap.txt Makefile memory_mmap.txt simstart.bash
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt unity_mmap.bin
現状は，app.c/main_task で直接制御を行っています．
コード断片は以下の通りです．
while(1) {
/**
* PID controller
*/
#define white 100
#define black 50
static float lasterror = 0, integral = 0;
static float midpoint = (white - black) / 2 + black;
{
float error = midpoint - ev3_color_sensor_get_reflect(EV3_PORT_1);
integral = error + integral * 0.</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_v850/</guid><description>EV3ロボット制御プログラム 現時点の制御プログラムの開発フォルダは以下のフォルダで，制御プログラムは app.c です．
v850版のathrill2を利用される場合は，以下のフォルダで作業してください．
$ ls ev3rt-athrill-v850e2m/sdk/workspace/line_trace/
app.c app.h device_config_mmap.txt log.txt memory_mmap.txt unity_mmap.bin
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt
または
$ ls ev3rt-athrill-v850e2m/sdk/workspace/color_sensor/
app.c app.h device_config_mmap.txt log.txt memory_mmap.txt unity_mmap.bin
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt
現状は，app.c/main_task で直接制御を行っています．
コード断片は以下の通りです．(line_traceの場合)
while(1) {
/**
* PID controller
*/
#define white 100
#define black 10
static float lasterror = 0, integral = 0;
static float midpoint = (white - black) / 2 + black;
{
float error = midpoint - ev3_color_sensor_get_reflect(EV3_PORT_1);
integral = error + integral * 0.</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityパッケージのダウンロード 単体ロボット向けシミュレータで使用するUnityパッケージを2種類用意してあります． どちらかのパッケージをご選択いただき，ダウンロードを行ってください．
使用するUnityパッケージ 説明 single-robot-HackEV HackEVを模した走行体モデルを使用しています ev3rt-simple-robot シンプルな走行体モデルを使用しています single-robot-HackEV(v2.0) 上記２つのモデルを含んでおり自由に選択できます single-robot-HackEV(v2.1) single-robot-HackEV(v2.0)の内容に加え，シミュレータのコンフィグ機能，バイナリ実行機能を追加したものとなっております．(Windows, Mac対応済み．Linux版は開発中です) それぞれ下記からダウンロードしてください
single-robot-HackEV.unitypackage https://github.com/toppers/hakoniwa-Unity-HackEV/releases/tag/v1.0 ev3rt-simple-robot.unitypackage https://github.com/toppers/hakoniwa-Unity-SimpleCar/releases single-robot-HackEV.unitypackage(v2.0) https://github.com/toppers/hakoniwa-Unity-HackEV/releases/tag/v2.0 single-robot-HackEV.unitypackage(v2.1) (Windows, Mac対応済み) https://github.com/toppers/hakoniwa-Unity-HackEV/releases/tag/v2.1 使用するUnityのパッケージによって，設定画面のレイアウトが異なりますため，
ご選択いただいたUnityパッケージに合わせた導入手順をご参照ください
Unityのインストール・パッケージのインポート・通信方式の切替方法 single-robot-HackEV(v2.1) を使用する場合 single-robot-HackEV(v2.0) を使用する場合 single-robot-HackEV または ev3rt-simple-robot を使用する場合</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v1.0/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityのインストール Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．
以下のサイト等が参考になるかと思います．
https://tech-camp.in/note/technology/44408/ ※動作確認はUnity 2020.1.0b9(64bit)で行っております．
使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．
Unityパッケージのインポート Unity 起動 まず，インストールしたUnityを起動してください．
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．
次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．
成功すると，以下のようにUnityが起動します．
Unityパッケージのインポート ※画像はsingle-robot-HackEV.unitypackageをインポートする際のものになります
Unity のメニューから，「Assets」⇒「Import Package」⇒「Custom Package&amp;hellip;」と選択し，任意の unitypackageファイルを選択してください．
成功すると，下図の画面がポップアップされますので，素直に「Import」ボタンを押下してください．
成功するとProject/Scenes配下にToppers_Courseというシーンが追加されます． Toppers_Courseをダブルクリックすると下図の画面が現れます．
次に，シミュレーションに関わる設定を変更します．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Time」
Fixed Timestep を 0.001に， Time Scale を 0.6に設定します．
※ev3rt-simple-robot.unitypackageを使用する場合で，もしシミュレーションの動作が
遅い場合には，Fixed Timestep を 0.01に，EV3 Motor(Script)のIntervalを 0.0005に
設定してください．
「Quality」
OtherのVSync Count を Don&amp;rsquo;t Sync に設定します．
これでインポート作業終了です．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.0/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityのインストール Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．
以下のサイト等が参考になるかと思います．
https://tech-camp.in/note/technology/44408/ ※動作確認はUnity 2020.1.0b9(64bit)で行っております．
使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．
Unityパッケージのインポート Unity 起動 まず，インストールしたUnityを起動してください．
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．
次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．
成功すると，以下のようにUnityが起動します．
Unityパッケージのインポート ※画像はsingle-robot-HackEV.unitypackageをインポートする際のものになります
Unity のメニューから，「Assets」⇒「Import Package」⇒「Custom Package&amp;hellip;」と選択し，任意の unitypackageファイルを選択してください．
成功すると，下図の画面がポップアップされますので，素直に「Import」ボタンを押下してください．
成功するとProject/Scenes配下にToppers_Courseというシーンが追加されます． Toppers_Courseをダブルクリックすると下図の画面が現れます．
次に，シミュレーションに関わる設定を変更します．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Time」
Fixed Timestep を 0.001に， Time Scale を 0.6に設定します．
※ev3rt-simple-robot.unitypackageを使用する場合で，もしシミュレーションの動作が
遅い場合には，Fixed Timestep を 0.01に，EV3 Motor(Script)のIntervalを 0.0005に
設定してください．
「Quality」
OtherのVSync Count を Don&amp;rsquo;t Sync に設定します．
これでインポート作業終了です．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.1/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityのインストール Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．
以下のサイト等が参考になるかと思います．
https://tech-camp.in/note/technology/44408/ ※動作確認はUnity 2020.1.0b9(64bit)で行っております．
使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．
Unityパッケージのインポート Unity 起動 まず，インストールしたUnityを起動してください．
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．
次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．
成功すると，以下のようにUnityが起動します．
Unityパッケージのインポート ※画像はsingle-robot-HackEV.unitypackageをインポートする際のものになります
Unity のメニューから，「Assets」⇒「Import Package」⇒「Custom Package&amp;hellip;」と選択し，任意の unitypackageファイルを選択してください．
成功すると，下図の画面がポップアップされますので，素直に「Import」ボタンを押下してください．
成功するとProject/Scenes配下にToppers_Courseというシーンが追加されます． Toppers_Courseをダブルクリックすると下図の画面が現れます．
次に，シミュレーションに関わる設定を変更します．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Time」
Fixed Timestep を 0.001に， Time Scale を 0.6に設定します．
※ev3rt-simple-robot.unitypackageを使用する場合で，もしシミュレーションの動作が
遅い場合には，Fixed Timestep を 0.01に，EV3 Motor(Script)のIntervalを 0.0005に
設定してください．
「Quality」
OtherのVSync Count を Don&amp;rsquo;t Sync に設定します．
これでインポート作業終了です．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap/</guid><description>MMAP用Unity設定 UnityとathrillをMMAPで通信する場合は，Unity側で以下の設定を行います．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Player」
Other SettingのScripting Define Symbols にVDEV_IO_MMAPと設定します．
MMAP用パラメータ設定 ※なお，このページで紹介しているUnity画面の画像はWindows版のものです
設定する場所は，Unity の以下のスクリプト・パラメータ(Filepath)部分です．
インポート直後ですと，[EV3 Actuator] と [EV3 Sensor]の Filepath は空白です．
ここに設定する値としては，athrillとUnity間で通信するためのMMAPファイルの絶対パスを指定します．
MMAPファイル自体は，以下の２ファイルがapp.cと同じフォルダに含まれています．
athrill_mmap.bin unity_mmap.bin unity_mmap.bin の絶対ファイルパスを，[EV3 Sensor]のFilepathに設定してください(設定例：下図)．
athrill_mmap.bin の絶対ファイルパスを，[EV3 Actuator]のFilepathに設定してください(設定例：下図)．
例えば，v850版を使用するという前提でev3rt-athrill-v850e2mのローカルリポジトリが，
C:\project\hakoniwaにあり，実行したいアプリケーションのフォルダがline_traceの場合は，
以下のパスを設定します．
[EV3 Actuator]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\unity_mmap.bin
[EV3 Sensor]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\athrill_mmap.bin
以上でMMAPの設定は終わりです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap_v2.0/</guid><description>MMAP用Unity設定 UnityとathrillをMMAPで通信する場合は，Unity側で以下の設定を行います．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Player」
Other SettingのScripting Define Symbols にVDEV_IO_MMAPと設定します．
MMAP用パラメータ設定 ※なお，このページで紹介しているUnity画面の画像はWindows版のものです
HierarchyビューでRobot配下のRoboModelを選択してください．
すると画面右のInspectorビューに[Io Writer (Script)]と[Io Reader (Script)]の項目が表示されます.
インポート直後ですと，[Io Writer (Script)] と [Io Reader (Script)]の Filepath は空白です．
ここに設定する値としては，athrillとUnity間で通信するためのMMAPファイルの絶対パスを指定します．
MMAPファイル自体は，以下の２ファイルがapp.cと同じフォルダに含まれています．
athrill_mmap.bin unity_mmap.bin unity_mmap.bin の絶対ファイルパスを，[Io Writer (Script)]のFilepathに設定してください(設定例：下図)．
athrill_mmap.bin の絶対ファイルパスを，[Io Reader (Script)]のFilepathに設定してください(設定例：下図)．
例えば，v850版を使用するという前提でev3rt-athrill-v850e2mのローカルリポジトリが，
C:\project\hakoniwaにあり，実行したいアプリケーションのフォルダがline_traceの場合は，
以下のパスを設定します．
[Io Writer (Script)]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\unity_mmap.bin
[Io Reader (Script)]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\athrill_mmap.bin
以上でMMAPの設定は終わりです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp/</guid><description>UDP用Unity設定 UnityとathrillをUDPで通信する場合は，Unity側で以下の設定を行います．
HierarchyビューでRobot配下のRoboModel_3を選択してください．
すると画面右のInspectorビューに[EV3 Motor (Script)]の項目が表示されます.
表示されたら，項目内のプロパティMax Diff Timeを40000に変更します．
UDP用パラメータ設定 UnityとathrillをUDPで通信する場合は，以下のパラメータを設定する必要があります．
※ただし，1台のPCでシミュレーションを実行する場合は，以下の設定は不要です．
説明する上でのIPアドレスの構成例 Unity側のIPアドレス：192.168.11.32
athrill側のIPアドレス：192.168.11.20
なお，IPアドレスの確認方法は以下のやり方でわかります．
お使いのPCがLinux/WSLの場合 ターミナル上で ifconfig コマンドを叩いて，ethernetの inet addr の値を確認します．
$ ifconfig
eth0 Link encap:Ethernet HWaddr 54:ee:75:b4:3c:96
inet addr:192.168.11.32 Bcast:192.168.11.255 Mask:255.255.255.0
inet6 addr: fe80::cc6d:70d3:a934:a61b/64 Scope:Unknown
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
お使いのPCがWindowsの場合 Windows PowerShell を開いて，ipconfigを叩きます．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp_v2.0/</guid><description>UDP用パラメータ設定 UnityとathrillをUDPで通信する場合は，以下のパラメータを設定する必要があります．
※ただし，1台のPCでシミュレーションを実行する場合は，以下の設定は不要です．
説明する上でのIPアドレスの構成例 Unity側のIPアドレス：192.168.11.32
athrill側のIPアドレス：192.168.11.20
なお，IPアドレスの確認方法は以下のやり方でわかります．
お使いのPCがLinux/WSLの場合 ターミナル上で ifconfig コマンドを叩いて，ethernetの inet addr の値を確認します．
$ ifconfig
eth0 Link encap:Ethernet HWaddr 54:ee:75:b4:3c:96
inet addr:192.168.11.32 Bcast:192.168.11.255 Mask:255.255.255.0
inet6 addr: fe80::cc6d:70d3:a934:a61b/64 Scope:Unknown
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
お使いのPCがWindowsの場合 Windows PowerShell を開いて，ipconfigを叩きます．
&amp;gt; ipconfig
Windows IP 構成
イーサネット アダプター イーサネット:
リンクローカル IPv6 アドレス.</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index/</guid><description>単体ロボット向けシミュレータ導入手順 開発プラットフォームとターゲットCPU 開発プラットフォームは，Windows/Linux/Mac です．
ターゲットCPUはV850/ARMの2種類が存在します．
ご自身の環境に合わせて，プラットフォームやターゲットCPUをご選択ください．
基本的な導入の流れは変わりありませんが，開発プラットフォームやターゲットCPU毎に
細かい箇所での導入手順が異なります．
対応するプラットフォーム/ターゲットCPUの導入手順をご確認ください．
Windows V850版 ARM版 Linux V850版 ARM版 Mac V850版（非対応です） ARM版</description></item><item><title>単体ロボット向けシミュレータ導入手順(Linux/ARM編)</title><link>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-linux-arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-linux-arm/</guid><description>単体ロボット向けシミュレータ導入手順(Linux/ARM編) 導入の流れ athrill2のインストール linux版64bit gccコンパイラ(ライブラリ含む)のインストール 箱庭用 EV3RT 開発環境のダウンロード サンプルアプリケーションの紹介 Unityのインストール・設定</description></item><item><title>単体ロボット向けシミュレータ導入手順(Linux/V850編)</title><link>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-linux-v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-linux-v850/</guid><description>単体ロボット向けシミュレータ導入手順(Linux/V850編) 導入の流れ Rubyのインストール athrill2のインストール linux版64bit gccコンパイラ(ライブラリ含む)のインストール 箱庭用 EV3RT 開発環境のダウンロード サンプルアプリケーションの紹介 Unityのインストール・設定</description></item><item><title>単体ロボット向けシミュレータ導入手順(Mac/ARM編)</title><link>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-mac-arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-mac-arm/</guid><description>単体ロボット向けシミュレータ導入手順(Mac/ARM編) 導入の流れ athrill2のインストール linux版64bit gccコンパイラ(ライブラリ含む)のインストール 箱庭用 EV3RT 開発環境のダウンロード サンプルアプリケーションの紹介 Unityのインストール・設定</description></item><item><title>単体ロボット向けシミュレータ導入手順(Windows/ARM編)</title><link>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-windows-arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-windows-arm/</guid><description>単体ロボット向けシミュレータ導入手順(Windows/ARM編) 導入の流れ WSLのインストール athrill2のインストール linux版64bit gccコンパイラ(ライブラリ含む)のインストール 箱庭用 EV3RT 開発環境のダウンロード サンプルアプリケーションの紹介 Unityのインストール・設定</description></item><item><title>単体ロボット向けシミュレータ導入手順(Windows/V850編)</title><link>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-windows-v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup/single-robot-setup-index-windows-v850/</guid><description>単体ロボット向けシミュレータ導入手順(Windows/V850編) 導入の流れ WSLのインストール Rubyのインストール athrill2のインストール linux版64bit gccコンパイラ(ライブラリ含む)のインストール 箱庭用 EV3RT 開発環境のダウンロード サンプルアプリケーションの紹介 Unityのインストール・設定</description></item><item><title>技術情報・発表資料</title><link>https://toppers.github.io/hakoniwa/technical-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/technical-links/</guid><description>最新の技術情報 Qiita記事 最新の開発状況は、主にQiitaで発信しています。
次のタグやOrganizationをフォローされると、最新情報が得やすくなります．
tag: 箱庭 tag: athrill tag: mROS organization: TOPPERSプロジェクト なお、Qiita記事では開発途上の試行版であったり古い情報が記載されていることがあります。
このページの先頭に戻る
講演資料や動画など ROSCon JP 2021 ROSCon JP 2021 が2021年9月16日(木)に開催されました。
ROSCon JPは、ロボット開発プラットフォームであるROS（Robot Operating System）に関する開発者会議の日本版です。TOPPERSプロジェクトはROSCon JP 2021にフレンドシップスポンサーとして協力しており、箱庭WGではROSの諸技術の発展・普及に貢献しています。
講演資料とともに講演動画がROSCon JP 2021のWebサイトより公開される予定です。
箱庭:IoT/クラウドロボティクス時代の仮想シミュレーション環境 講演資料 (PDFファイル) ROS 2 Client Library for E^2 講演資料 (SlideShare)
2021年度 ETロボコン向け TOPPERS活用セミナー 2021年6月26日(土)に開催されたETロボコン向け TOPPERS活用セミナーの講義資料です。 箱庭プロトタイプモデルの単体ロボット向けシミュレータの紹介と、ETロボコン大会のシミュレータ環境に採用されているマイコンシミュレータAthrillについて、そのデバッグ機能や進んだ使い方を詳しく解説しました。
講義資料 (PDFファイル) 動画 (YouTube)
TOPPERSカンファレンス2021 2021年6月4日(金)に開催されたTOPPERSカンファレンス2021の講演資料です。 箱庭WGの活動紹介、箱庭コア技術の最新の開発状況、および、教育機会への箱庭成果物の活用事例についての紹介を行いました。</description></item></channel></rss>