<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Single-robot-setup-details on 箱庭</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/</link><description>Recent content in Single-robot-setup-details on 箱庭</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://toppers.github.io/hakoniwa/single-robot-setup-detail/index.xml" rel="self" type="application/rss+xml"/><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/10_wsl_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/10_wsl_install/</guid><description>WSLのインストール Windows版の場合はWSLをインストールいただく必要があります．
※注意点として，現時点(2020/6月)時点では，WSL2はご利用いただけません(WSL2とUnity間でUDP通信できないため)．
WSLのインストール方法は色々なサイトで紹介されておりますので，Ubuntu 18.04 LTSをインストールください．
以下のサイト等が参考になるかと思います．
https://qiita.com/Aruneko/items/c79810b0b015bebf30bb インストールが完了したら，aptパッケージを更新しておきます．
(更新しないと後ほど行うgccのインストールで失敗することがあるためです)
$ sudo apt update
aptパッケージを更新したら，あらかじめ以下が使用できるようにインストールしておきます
gcc make $ sudo apt install build-essential</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_mac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_mac/</guid><description>Rubyのインストール v850版をご利用される場合は，RTOSがASP3になりますので，Rubyをインストールいただく必要があります． ※EV3ロボット制御アプリをビルドする際に必要となります．
Homebrewを使用してインストールします．
$ brew install ruby</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_win_linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_win_linux/</guid><description>Rubyのインストール v850版をご利用される場合は，RTOSがASP3になりますので，Rubyをインストールいただく必要があります． ※EV3ロボット制御アプリをビルドする際に必要となります．
$ sudo apt install ruby</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_arm/</guid><description>athrill2のインストール athrill2のインストール手順 athrill のチェックアウト athrill-target のチェックアウト コンパイラのインストール ビルド＆インストール athrill のチェックアウト athrill は，設計上，CPUアーキに依存しない共通コードとCPU依存するコードを分離しています．
共通コードのチェックアウトは，以下の通りです．
$ git clone https://github.com/toppers/athrill.git
athrill-target のチェックアウト CPUアーキに依存するコードは，athrill-target側で管理しています． 今回のARM対応版は，ここにあります．
$ git clone https://github.com/toppers/athrill-target-ARMv7-A.git
なお，athrill と athrill-targetを以下のフォルダ構成にしてください．
.
├── athrill
└── athrill-target-ARMv7-A
コンパイラのインストール Linux の方は，gcc をインストールください．
Windows の方は，WSL上で gcc をインストールください．
Mac の方は，clang をインストールください．
ビルド＆インストール ビルド方法ですが，端末上でathrill-target-ARMv7-A に移動してください．
Linux/Windowsの方は，さらに build_linux に移動してください．
Macの方は，build_mac に移動してください．
移動終わったら，以下コマンド実行するだけです．
make timer32=true clean
make timer32=true
ビルド成功すると，athrill側の bin/linux 配下に athrill2 というバイナリが配置されるはずです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_v850/</guid><description>athrill2のインストール athrill2のインストール手順 athrill のチェックアウト athrill-target のチェックアウト コンパイラのインストール ビルド＆インストール athrill のチェックアウト athrill は，設計上，CPUアーキに依存しない共通コードとCPU依存するコードを分離しています．
共通コードのチェックアウトは，以下の通りです．
$ git clone https://github.com/toppers/athrill.git
athrill-target のチェックアウト CPUアーキに依存するコードは，athrill-target側で管理しています．
今回のV850対応版は，ここにあります．
$ git clone https://github.com/toppers/athrill-target-v850e2m.git
なお，athrill と athrill-targetを以下のフォルダ構成にしてください．
.
├── athrill
└── athrill-target-v850e2m
コンパイラのインストール Linux の方は，gcc をインストールください．
Windows の方は，WSL上で gcc をインストールください．
Mac の方は，clang をインストールください．
ビルド＆インストール ビルド方法ですが，端末上でathrill-target-v850e2m に移動してください．
Linux/Windowsの方は，さらに build_linux に移動してください．
Macの方は，build_mac に移動してください．
移動終わったら，以下コマンド実行するだけです．
make timer32=true clean
make timer32=true
ビルド成功すると，athrill側の bin/linux 配下に athrill2 というバイナリが配置されるはずです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_arm/</guid><description>linux版64bit gccコンパイラ(ライブラリ含む)のインストール ARM版のathrill2を利用される場合は，以下のサイトを参考にコンパイラおよびライブラリをインストールください．
Windows(WSL)
https://www.yokoweb.net/2018/03/07/wsl-ubuntu-arm-gcc/ Linux
https://www.yokoweb.net/2018/05/16/ubuntu-18_04-gcc-arm-install/ Mac
https://www.yokoweb.net/2018/05/16/macos-gcc-arm-brew-install/</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_v850/</guid><description>linux版64bit gccコンパイラ(ライブラリ含む)のインストール v850版のathrill2を利用される場合は，以下のサイトからコンパイラおよびライブラリ(athrill-gcc-package.tar.gz)をダウンロードください．
https://github.com/toppers/athrill-gcc-v850e2m/releases/tag/v1.1 $ tar xzvf athrill-gcc-package.tar.gz
$ cd athrill-gcc-package/
$ tar xzvf athrill-gcc.tar.gz
$ ls usr/local/athrill-gcc/
bin include lib libexec share v850-elf
解凍後，usr/local/athrill-gccを /usr/local 直下に移動してください．
$ sudo mv usr/local/athrill-gcc /usr/local
あとは，.bashrc に以下のパスを設定するだけです．
export PATH=/usr/local/athrill-gcc/bin/:${PATH}
export LD_LIBRARY_PATH=/usr/local/athrill-gcc:/usr/local/athrill-gcc/lib:${LD_LIBRARY_PATH}
設定後は，パスの有効化を忘れずに行ってください．
source ${HOME}/.bashrc</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_arm/</guid><description>箱庭用 EV3RT 開発環境のダウンロード 任意のフォルダ上で，athrillサンプル(athrill-sample)のプログラムを git clone してください．
なお，cloneする場所は，以下のように athrillと同じフォルダ階層で実施してください．
|---athril
|---athrill-target-ARMv7-A
└---ev3rt-athrill-ARMv7-A
clone方法は以下の通りです．
$ git clone https://github.com/toppers/ev3rt-athrill-ARMv7-A.git</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_v850/</guid><description>箱庭用 EV3RT 開発環境のダウンロード 任意のフォルダ上で，athrillサンプル(athrill-sample)のプログラムを git clone してください．
なお，cloneする場所は，以下のように athrillと同じフォルダ階層で実施してください．
|---athril
|---athrill-target-v850e2m
└---ev3rt-athrill-v850e2m
clone方法は以下の通りです．
$ git clone https://github.com/toppers/ev3rt-athrill-v850e2m.git
サンプルアプリケーションのダウンロード 2種類のサンプルアプリケーションを用意しています．
こちらから git clone いただき，hakoniwa-scenario-samples/single-robot配下の全てのフォルダを
ev3rt-athrill-v850e2m/sdk/workspace に配置ください．
$ git clone https://github.com/toppers/hakoniwa-scenario-samples.git</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_arm/</guid><description>EV3ロボット制御プログラム 現時点の制御プログラムの開発フォルダは以下のフォルダで，制御プログラムは app.c です．
※まだ暫定構成です．
ARM版のathrill2を利用される場合は，以下のフォルダで作業してください．
$ ls ev3rt-athrill-ARMv7-A/sdk/OBJ1.1/
app.c app.h device_config_mmap.txt Makefile memory_mmap.txt simstart.bash
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt unity_mmap.bin
現状は，app.c/main_task で直接制御を行っています．
コード断片は以下の通りです．
while(1) {
/**
* PID controller
*/
#define white 100
#define black 50
static float lasterror = 0, integral = 0;
static float midpoint = (white - black) / 2 + black;
{
float error = midpoint - ev3_color_sensor_get_reflect(EV3_PORT_1);
integral = error + integral * 0.</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_v850/</guid><description>EV3ロボット制御プログラム 現時点の制御プログラムの開発フォルダは以下のフォルダで，制御プログラムは app.c です．
v850版のathrill2を利用される場合は，以下のフォルダで作業してください．
$ ls ev3rt-athrill-v850e2m/sdk/workspace/line_trace/
app.c app.h device_config_mmap.txt log.txt memory_mmap.txt unity_mmap.bin
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt
または
$ ls ev3rt-athrill-v850e2m/sdk/workspace/color_sensor/
app.c app.h device_config_mmap.txt log.txt memory_mmap.txt unity_mmap.bin
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt
現状は，app.c/main_task で直接制御を行っています．
コード断片は以下の通りです．(line_traceの場合)
while(1) {
/**
* PID controller
*/
#define white 100
#define black 10
static float lasterror = 0, integral = 0;
static float midpoint = (white - black) / 2 + black;
{
float error = midpoint - ev3_color_sensor_get_reflect(EV3_PORT_1);
integral = error + integral * 0.</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityパッケージのダウンロード 単体ロボット向けシミュレータで使用するUnityパッケージを2種類用意してあります． どちらかのパッケージをご選択いただき，ダウンロードを行ってください．
使用するUnityパッケージ 説明 single-robot-HackEV HackEVを模した走行体モデルを使用しています ev3rt-simple-robot シンプルな走行体モデルを使用しています single-robot-HackEV(v2.0) 上記２つのモデルを含んでおり自由に選択できます single-robot-HackEV(v2.1) single-robot-HackEV(v2.0)の内容に加え，シミュレータのコンフィグ機能，バイナリ実行機能を追加したものとなっております．(Windows, Mac対応済み．Linux版は開発中です) それぞれ下記からダウンロードしてください
single-robot-HackEV.unitypackage https://github.com/toppers/hakoniwa-Unity-HackEV/releases/tag/v1.0 ev3rt-simple-robot.unitypackage https://github.com/toppers/hakoniwa-Unity-SimpleCar/releases single-robot-HackEV.unitypackage(v2.0) https://github.com/toppers/hakoniwa-Unity-HackEV/releases/tag/v2.0 single-robot-HackEV.unitypackage(v2.1) (Windows, Mac対応済み) https://github.com/toppers/hakoniwa-Unity-HackEV/releases/tag/v2.1 使用するUnityのパッケージによって，設定画面のレイアウトが異なりますため，
ご選択いただいたUnityパッケージに合わせた導入手順をご参照ください
Unityのインストール・パッケージのインポート・通信方式の切替方法 single-robot-HackEV(v2.1) を使用する場合 single-robot-HackEV(v2.0) を使用する場合 single-robot-HackEV または ev3rt-simple-robot を使用する場合</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v1.0/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityのインストール Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．
以下のサイト等が参考になるかと思います．
https://tech-camp.in/note/technology/44408/ ※動作確認はUnity 2020.1.0b9(64bit)で行っております．
使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．
Unityパッケージのインポート Unity 起動 まず，インストールしたUnityを起動してください．
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．
次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．
成功すると，以下のようにUnityが起動します．
Unityパッケージのインポート ※画像はsingle-robot-HackEV.unitypackageをインポートする際のものになります
Unity のメニューから，「Assets」⇒「Import Package」⇒「Custom Package&amp;hellip;」と選択し，任意の unitypackageファイルを選択してください．
成功すると，下図の画面がポップアップされますので，素直に「Import」ボタンを押下してください．
成功するとProject/Scenes配下にToppers_Courseというシーンが追加されます． Toppers_Courseをダブルクリックすると下図の画面が現れます．
次に，シミュレーションに関わる設定を変更します．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Time」
Fixed Timestep を 0.001に， Time Scale を 0.6に設定します．
※ev3rt-simple-robot.unitypackageを使用する場合で，もしシミュレーションの動作が
遅い場合には，Fixed Timestep を 0.01に，EV3 Motor(Script)のIntervalを 0.0005に
設定してください．
「Quality」
OtherのVSync Count を Don&amp;rsquo;t Sync に設定します．
これでインポート作業終了です．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.0/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityのインストール Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．
以下のサイト等が参考になるかと思います．
https://tech-camp.in/note/technology/44408/ ※動作確認はUnity 2020.1.0b9(64bit)で行っております．
使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．
Unityパッケージのインポート Unity 起動 まず，インストールしたUnityを起動してください．
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．
次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．
成功すると，以下のようにUnityが起動します．
Unityパッケージのインポート ※画像はsingle-robot-HackEV.unitypackageをインポートする際のものになります
Unity のメニューから，「Assets」⇒「Import Package」⇒「Custom Package&amp;hellip;」と選択し，任意の unitypackageファイルを選択してください．
成功すると，下図の画面がポップアップされますので，素直に「Import」ボタンを押下してください．
成功するとProject/Scenes配下にToppers_Courseというシーンが追加されます． Toppers_Courseをダブルクリックすると下図の画面が現れます．
次に，シミュレーションに関わる設定を変更します．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Time」
Fixed Timestep を 0.001に， Time Scale を 0.6に設定します．
※ev3rt-simple-robot.unitypackageを使用する場合で，もしシミュレーションの動作が
遅い場合には，Fixed Timestep を 0.01に，EV3 Motor(Script)のIntervalを 0.0005に
設定してください．
「Quality」
OtherのVSync Count を Don&amp;rsquo;t Sync に設定します．
これでインポート作業終了です．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.1/</guid><description>Unityのインストール・パッケージのインポート・通信方式の切替方法 Unityのインストール Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．
以下のサイト等が参考になるかと思います．
https://tech-camp.in/note/technology/44408/ ※動作確認はUnity 2020.1.0b9(64bit)で行っております．
使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．
Unityパッケージのインポート Unity 起動 まず，インストールしたUnityを起動してください．
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．
次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．
成功すると，以下のようにUnityが起動します．
Unityパッケージのインポート ※画像はsingle-robot-HackEV.unitypackageをインポートする際のものになります
Unity のメニューから，「Assets」⇒「Import Package」⇒「Custom Package&amp;hellip;」と選択し，任意の unitypackageファイルを選択してください．
成功すると，下図の画面がポップアップされますので，素直に「Import」ボタンを押下してください．
成功するとProject/Scenes配下にToppers_Courseというシーンが追加されます． Toppers_Courseをダブルクリックすると下図の画面が現れます．
次に，シミュレーションに関わる設定を変更します．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Time」
Fixed Timestep を 0.001に， Time Scale を 0.6に設定します．
※ev3rt-simple-robot.unitypackageを使用する場合で，もしシミュレーションの動作が
遅い場合には，Fixed Timestep を 0.01に，EV3 Motor(Script)のIntervalを 0.0005に
設定してください．
「Quality」
OtherのVSync Count を Don&amp;rsquo;t Sync に設定します．
これでインポート作業終了です．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap/</guid><description>MMAP用Unity設定 UnityとathrillをMMAPで通信する場合は，Unity側で以下の設定を行います．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Player」
Other SettingのScripting Define Symbols にVDEV_IO_MMAPと設定します．
MMAP用パラメータ設定 ※なお，このページで紹介しているUnity画面の画像はWindows版のものです
設定する場所は，Unity の以下のスクリプト・パラメータ(Filepath)部分です．
インポート直後ですと，[EV3 Actuator] と [EV3 Sensor]の Filepath は空白です．
ここに設定する値としては，athrillとUnity間で通信するためのMMAPファイルの絶対パスを指定します．
MMAPファイル自体は，以下の２ファイルがapp.cと同じフォルダに含まれています．
athrill_mmap.bin unity_mmap.bin unity_mmap.bin の絶対ファイルパスを，[EV3 Sensor]のFilepathに設定してください(設定例：下図)．
athrill_mmap.bin の絶対ファイルパスを，[EV3 Actuator]のFilepathに設定してください(設定例：下図)．
例えば，v850版を使用するという前提でev3rt-athrill-v850e2mのローカルリポジトリが，
C:\project\hakoniwaにあり，実行したいアプリケーションのフォルダがline_traceの場合は，
以下のパスを設定します．
[EV3 Actuator]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\unity_mmap.bin
[EV3 Sensor]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\athrill_mmap.bin
以上でMMAPの設定は終わりです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap_v2.0/</guid><description>MMAP用Unity設定 UnityとathrillをMMAPで通信する場合は，Unity側で以下の設定を行います．
Unity のメニューから，「Edit」⇒「Project Settings」を選択します．
「Player」
Other SettingのScripting Define Symbols にVDEV_IO_MMAPと設定します．
MMAP用パラメータ設定 ※なお，このページで紹介しているUnity画面の画像はWindows版のものです
HierarchyビューでRobot配下のRoboModelを選択してください．
すると画面右のInspectorビューに[Io Writer (Script)]と[Io Reader (Script)]の項目が表示されます.
インポート直後ですと，[Io Writer (Script)] と [Io Reader (Script)]の Filepath は空白です．
ここに設定する値としては，athrillとUnity間で通信するためのMMAPファイルの絶対パスを指定します．
MMAPファイル自体は，以下の２ファイルがapp.cと同じフォルダに含まれています．
athrill_mmap.bin unity_mmap.bin unity_mmap.bin の絶対ファイルパスを，[Io Writer (Script)]のFilepathに設定してください(設定例：下図)．
athrill_mmap.bin の絶対ファイルパスを，[Io Reader (Script)]のFilepathに設定してください(設定例：下図)．
例えば，v850版を使用するという前提でev3rt-athrill-v850e2mのローカルリポジトリが，
C:\project\hakoniwaにあり，実行したいアプリケーションのフォルダがline_traceの場合は，
以下のパスを設定します．
[Io Writer (Script)]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\unity_mmap.bin
[Io Reader (Script)]のFilePath
C:\project\hakoniwa\ev3rt-athrill-v850e2m\sdk\workspace\line_trace\athrill_mmap.bin
以上でMMAPの設定は終わりです．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp/</guid><description>UDP用Unity設定 UnityとathrillをUDPで通信する場合は，Unity側で以下の設定を行います．
HierarchyビューでRobot配下のRoboModel_3を選択してください．
すると画面右のInspectorビューに[EV3 Motor (Script)]の項目が表示されます.
表示されたら，項目内のプロパティMax Diff Timeを40000に変更します．
UDP用パラメータ設定 UnityとathrillをUDPで通信する場合は，以下のパラメータを設定する必要があります．
※ただし，1台のPCでシミュレーションを実行する場合は，以下の設定は不要です．
説明する上でのIPアドレスの構成例 Unity側のIPアドレス：192.168.11.32
athrill側のIPアドレス：192.168.11.20
なお，IPアドレスの確認方法は以下のやり方でわかります．
お使いのPCがLinux/WSLの場合 ターミナル上で ifconfig コマンドを叩いて，ethernetの inet addr の値を確認します．
$ ifconfig
eth0 Link encap:Ethernet HWaddr 54:ee:75:b4:3c:96
inet addr:192.168.11.32 Bcast:192.168.11.255 Mask:255.255.255.0
inet6 addr: fe80::cc6d:70d3:a934:a61b/64 Scope:Unknown
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
お使いのPCがWindowsの場合 Windows PowerShell を開いて，ipconfigを叩きます．</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp_v2.0/</guid><description>UDP用パラメータ設定 UnityとathrillをUDPで通信する場合は，以下のパラメータを設定する必要があります．
※ただし，1台のPCでシミュレーションを実行する場合は，以下の設定は不要です．
説明する上でのIPアドレスの構成例 Unity側のIPアドレス：192.168.11.32
athrill側のIPアドレス：192.168.11.20
なお，IPアドレスの確認方法は以下のやり方でわかります．
お使いのPCがLinux/WSLの場合 ターミナル上で ifconfig コマンドを叩いて，ethernetの inet addr の値を確認します．
$ ifconfig
eth0 Link encap:Ethernet HWaddr 54:ee:75:b4:3c:96
inet addr:192.168.11.32 Bcast:192.168.11.255 Mask:255.255.255.0
inet6 addr: fe80::cc6d:70d3:a934:a61b/64 Scope:Unknown
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
お使いのPCがWindowsの場合 Windows PowerShell を開いて，ipconfigを叩きます．
&amp;gt; ipconfig
Windows IP 構成
イーサネット アダプター イーサネット:
リンクローカル IPv6 アドレス.</description></item></channel></rss>