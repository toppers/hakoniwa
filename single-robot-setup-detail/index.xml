<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Single-Robot-Setup-Details on 箱庭</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/</link><description>Recent content in Single-Robot-Setup-Details on 箱庭</description><generator>Hugo</generator><language>ja</language><atom:link href="https://toppers.github.io/hakoniwa/single-robot-setup-detail/index.xml" rel="self" type="application/rss+xml"/><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/10_wsl_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/10_wsl_install/</guid><description>&lt;h1 id="wslのインストール">WSLのインストール&lt;/h1>
&lt;hr>
&lt;p>Windows版の場合はWSLをインストールいただく必要があります．&lt;br>
※注意点として，現時点(2020/6月)時点では，WSL2はご利用いただけません(WSL2とUnity間でUDP通信できないため)．&lt;/p>
&lt;p>WSLのインストール方法は色々なサイトで紹介されておりますので，Ubuntu 18.04 LTSをインストールください．&lt;/p>
&lt;p>以下のサイト等が参考になるかと思います．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/Aruneko/items/c79810b0b015bebf30bb">https://qiita.com/Aruneko/items/c79810b0b015bebf30bb&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>インストールが完了したら，aptパッケージを更新しておきます．&lt;br>
(更新しないと後ほど行うgccのインストールで失敗することがあるためです)&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo apt update
&lt;/code>&lt;/pre>&lt;p>aptパッケージを更新したら，あらかじめ以下が使用できるようにインストールしておきます&lt;/p>
&lt;ul>
&lt;li>gcc&lt;/li>
&lt;li>make&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ sudo apt install build-essential
&lt;/code>&lt;/pre></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_mac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_mac/</guid><description>&lt;h1 id="rubyのインストール">Rubyのインストール&lt;/h1>
&lt;hr>
&lt;p>v850版をご利用される場合は，RTOSがASP3になりますので，Rubyをインストールいただく必要があります．
※EV3ロボット制御アプリをビルドする際に必要となります．&lt;/p>
&lt;p>Homebrewを使用してインストールします．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ brew install ruby
&lt;/code>&lt;/pre></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_win_linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/20_ruby_install_win_linux/</guid><description>&lt;h1 id="rubyのインストール">Rubyのインストール&lt;/h1>
&lt;hr>
&lt;p>v850版をご利用される場合は，RTOSがASP3になりますので，Rubyをインストールいただく必要があります．
※EV3ロボット制御アプリをビルドする際に必要となります．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo apt install ruby
&lt;/code>&lt;/pre></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_arm/</guid><description>&lt;h1 id="athrill2のインストール">athrill2のインストール&lt;/h1>
&lt;h2 id="athrill2のインストール手順">athrill2のインストール手順&lt;/h2>
&lt;hr>
&lt;ul>
&lt;li>athrill のチェックアウト&lt;/li>
&lt;li>athrill-target のチェックアウト&lt;/li>
&lt;li>コンパイラのインストール&lt;/li>
&lt;li>ビルド＆インストール&lt;/li>
&lt;/ul>
&lt;h2 id="athrill-のチェックアウト">athrill のチェックアウト&lt;/h2>
&lt;hr>
&lt;p>athrill は，設計上，CPUアーキに依存しない共通コードとCPU依存するコードを分離しています．&lt;/p>
&lt;p>共通コードのチェックアウトは，以下の通りです．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/athrill.git
&lt;/code>&lt;/pre>&lt;h2 id="athrill-target-のチェックアウト">athrill-target のチェックアウト&lt;/h2>
&lt;hr>
&lt;p>CPUアーキに依存するコードは，athrill-target側で管理しています．
今回のARM対応版は，ここにあります．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/athrill-target-ARMv7-A.git
&lt;/code>&lt;/pre>&lt;p>なお，athrill と athrill-targetを以下のフォルダ構成にしてください．&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── athrill
└── athrill-target-ARMv7-A
&lt;/code>&lt;/pre>&lt;h2 id="コンパイラのインストール">コンパイラのインストール&lt;/h2>
&lt;hr>
&lt;p>Linux の方は，gcc をインストールください．&lt;br>
Windows の方は，WSL上で gcc をインストールください．&lt;br>
Mac の方は，clang をインストールください．&lt;/p>
&lt;h2 id="ビルドインストール">ビルド＆インストール&lt;/h2>
&lt;hr>
&lt;p>ビルド方法ですが，端末上でathrill-target-ARMv7-A に移動してください．&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/30_athrill2_install_v850/</guid><description>&lt;h1 id="athrill2のインストール">athrill2のインストール&lt;/h1>
&lt;h2 id="athrill2のインストール手順">athrill2のインストール手順&lt;/h2>
&lt;hr>
&lt;ul>
&lt;li>athrill のチェックアウト&lt;/li>
&lt;li>athrill-target のチェックアウト&lt;/li>
&lt;li>コンパイラのインストール&lt;/li>
&lt;li>ビルド＆インストール&lt;/li>
&lt;/ul>
&lt;h2 id="athrill-のチェックアウト">athrill のチェックアウト&lt;/h2>
&lt;hr>
&lt;p>athrill は，設計上，CPUアーキに依存しない共通コードとCPU依存するコードを分離しています．&lt;/p>
&lt;p>共通コードのチェックアウトは，以下の通りです．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/athrill.git
&lt;/code>&lt;/pre>&lt;h2 id="athrill-target-のチェックアウト">athrill-target のチェックアウト&lt;/h2>
&lt;hr>
&lt;p>CPUアーキに依存するコードは，athrill-target側で管理しています．&lt;br>
今回のV850対応版は，ここにあります．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/athrill-target-v850e2m.git
&lt;/code>&lt;/pre>&lt;p>なお，athrill と athrill-targetを以下のフォルダ構成にしてください．&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── athrill
└── athrill-target-v850e2m
&lt;/code>&lt;/pre>&lt;h2 id="コンパイラのインストール">コンパイラのインストール&lt;/h2>
&lt;hr>
&lt;p>Linux の方は，gcc をインストールください．&lt;br>
Windows の方は，WSL上で gcc をインストールください．&lt;br>
Mac の方は，clang をインストールください．&lt;/p>
&lt;h2 id="ビルドインストール">ビルド＆インストール&lt;/h2>
&lt;hr>
&lt;p>ビルド方法ですが，端末上でathrill-target-v850e2m に移動してください．&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_arm/</guid><description>&lt;h1 id="linux版64bit-gccコンパイラライブラリ含むのインストール">linux版64bit gccコンパイラ(ライブラリ含む)のインストール&lt;/h1>
&lt;hr>
&lt;p>ARM版のathrill2を利用される場合は，以下のサイトを参考にコンパイラおよびライブラリをインストールください．&lt;/p>
&lt;p>Windows(WSL)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.yokoweb.net/2018/03/07/wsl-ubuntu-arm-gcc/">https://www.yokoweb.net/2018/03/07/wsl-ubuntu-arm-gcc/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Linux&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.yokoweb.net/2018/05/16/ubuntu-18_04-gcc-arm-install/">https://www.yokoweb.net/2018/05/16/ubuntu-18_04-gcc-arm-install/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Mac&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.yokoweb.net/2018/05/16/macos-gcc-arm-brew-install/">https://www.yokoweb.net/2018/05/16/macos-gcc-arm-brew-install/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/40_gcc_install_v850/</guid><description>&lt;h1 id="linux版64bit-gccコンパイラライブラリ含むのインストール">linux版64bit gccコンパイラ(ライブラリ含む)のインストール&lt;/h1>
&lt;hr>
&lt;p>v850版のathrill2を利用される場合は，以下のサイトからコンパイラおよびライブラリ(athrill-gcc-package.tar.gz)をダウンロードください．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/toppers/athrill-gcc-v850e2m/releases/tag/v1.1">https://github.com/toppers/athrill-gcc-v850e2m/releases/tag/v1.1&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ tar xzvf athrill-gcc-package.tar.gz
$ cd athrill-gcc-package/
$ tar xzvf athrill-gcc.tar.gz
$ ls usr/local/athrill-gcc/
bin include lib libexec share v850-elf
&lt;/code>&lt;/pre>&lt;p>解凍後，usr/local/athrill-gccを /usr/local 直下に移動してください．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo mv usr/local/athrill-gcc /usr/local
&lt;/code>&lt;/pre>&lt;p>あとは，.bashrc に以下のパスを設定するだけです．&lt;/p>
&lt;pre tabindex="0">&lt;code>export PATH=/usr/local/athrill-gcc/bin/:${PATH}
export LD_LIBRARY_PATH=/usr/local/athrill-gcc:/usr/local/athrill-gcc/lib:${LD_LIBRARY_PATH}
&lt;/code>&lt;/pre>&lt;p>設定後は，パスの有効化を忘れずに行ってください．&lt;/p>
&lt;pre tabindex="0">&lt;code>source ${HOME}/.bashrc
&lt;/code>&lt;/pre></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_arm/</guid><description>&lt;h1 id="箱庭用-ev3rt-開発環境のダウンロード">箱庭用 EV3RT 開発環境のダウンロード&lt;/h1>
&lt;p>任意のフォルダ上で，athrillサンプル(athrill-sample)のプログラムを git clone してください．&lt;/p>
&lt;p>なお，cloneする場所は，以下のように athrillと同じフォルダ階層で実施してください．&lt;/p>
&lt;pre tabindex="0">&lt;code> |---athril
 |---athrill-target-ARMv7-A
 └---ev3rt-athrill-ARMv7-A
&lt;/code>&lt;/pre>&lt;p>clone方法は以下の通りです．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/ev3rt-athrill-ARMv7-A.git
&lt;/code>&lt;/pre></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/50_hakoniwa_ev3rt_install_v850/</guid><description>&lt;h1 id="箱庭用-ev3rt-開発環境のダウンロード">箱庭用 EV3RT 開発環境のダウンロード&lt;/h1>
&lt;p>任意のフォルダ上で，athrillサンプル(athrill-sample)のプログラムを git clone してください．&lt;/p>
&lt;p>なお，cloneする場所は，以下のように athrillと同じフォルダ階層で実施してください．&lt;/p>
&lt;pre tabindex="0">&lt;code> |---athril
 |---athrill-target-v850e2m
 └---ev3rt-athrill-v850e2m
&lt;/code>&lt;/pre>&lt;p>clone方法は以下の通りです．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/ev3rt-athrill-v850e2m.git
&lt;/code>&lt;/pre>&lt;h2 id="サンプルアプリケーションのダウンロード">サンプルアプリケーションのダウンロード&lt;/h2>
&lt;hr>
&lt;p>2種類のサンプルアプリケーションを用意しています．&lt;/p>
&lt;p>こちらから git clone いただき，&lt;code>hakoniwa-scenario-samples/single-robot&lt;/code>配下の全てのフォルダを&lt;br>
&lt;code>ev3rt-athrill-v850e2m/sdk/workspace&lt;/code> に配置ください．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/toppers/hakoniwa-scenario-samples.git
&lt;/code>&lt;/pre></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_arm/</guid><description>&lt;h3 id="ev3ロボット制御プログラム">EV3ロボット制御プログラム&lt;/h3>
&lt;p>現時点の制御プログラムの開発フォルダは以下のフォルダで，制御プログラムは app.c です．&lt;br>
※まだ暫定構成です．&lt;/p>
&lt;p>ARM版のathrill2を利用される場合は，以下のフォルダで作業してください．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls ev3rt-athrill-ARMv7-A/sdk/OBJ1.1/
app.c app.h device_config_mmap.txt Makefile memory_mmap.txt simstart.bash
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt unity_mmap.bin
&lt;/code>&lt;/pre>&lt;p>現状は，app.c/main_task で直接制御を行っています．&lt;br>
コード断片は以下の通りです．&lt;/p>
&lt;pre tabindex="0">&lt;code> while(1) {

 /**
 * PID controller
 */
#define white 100
#define black 50
 static float lasterror = 0, integral = 0;
 static float midpoint = (white - black) / 2 + black;
 {
 float error = midpoint - ev3_color_sensor_get_reflect(EV3_PORT_1);
 integral = error + integral * 0.3;
 float steer = 0.6 * error + 0.3 * integral + 1 * (error - lasterror);
 ev3_motor_steer(left_motor, right_motor, 10, steer);
 lasterror = error;

 debug_var = ev3_gyro_sensor_get_angle(EV3_PORT_4);

 int distance = ev3_ultrasonic_sensor_get_distance(EV3_PORT_2);
 debug_var2 = distance;
 if (distance &amp;lt;= 100) {
 ev3_motor_stop(left_motor, false);
 ev3_motor_stop(right_motor, false);
 }
 }
 tslp_tsk(100); /* 100msec */

 }
}
&lt;/code>&lt;/pr</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_v850/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/51_ev3rt_app_introduction_v850/</guid><description>&lt;h3 id="ev3ロボット制御プログラム">EV3ロボット制御プログラム&lt;/h3>
&lt;p>現時点の制御プログラムの開発フォルダは以下のフォルダで，制御プログラムは app.c です．&lt;/p>
&lt;p>v850版のathrill2を利用される場合は，以下のフォルダで作業してください．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls ev3rt-athrill-v850e2m/sdk/workspace/line_trace/
app.c app.h device_config_mmap.txt log.txt memory_mmap.txt unity_mmap.bin
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt
&lt;/code>&lt;/pre>&lt;p>または&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls ev3rt-athrill-v850e2m/sdk/workspace/color_sensor/
app.c app.h device_config_mmap.txt log.txt memory_mmap.txt unity_mmap.bin
app.cfg athrill_mmap.bin device_config.txt Makefile.inc memory.txt
&lt;/code>&lt;/pr</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install/</guid><description>&lt;h1 id="unityのインストールパッケージのインポート通信方式の切替方法">Unityのインストール・パッケージのインポート・通信方式の切替方法&lt;/h1>
&lt;h2 id="unityパッケージのダウンロード">Unityパッケージのダウンロード&lt;/h2>
&lt;hr>
&lt;p>単体ロボット向けシミュレータで使用するUnityパッケージを2種類用意してあります．
どちらかのパッケージをご選択いただき，ダウンロードを行ってください．&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">使用するUnityパッケージ&lt;/th>
 &lt;th style="text-align: left">説明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">single-robot-HackEV&lt;/td>
 &lt;td style="text-align: left">HackEVを模した走行体モデルを使用しています&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">ev3rt-simple-robot&lt;/td>
 &lt;td style="text-align: left">シンプルな走行体モデルを使用しています&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">single-robot-HackEV(v2.0)&lt;/td>
 &lt;td style="text-align: left">上記２つのモデルを含んでおり自由に選択できます&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">single-robot-HackEV(v2.1)&lt;/td>
 &lt;td style="text-align: left">single-robot-HackEV(v2.0)の内容に加え，シミュレータのコンフィグ機能，バイナリ実行機能を追加したものとなっております．(Windows, Mac対応済み．Linux版は開発中です)&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>それぞれ下記からダウンロードしてください&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v1.0/</guid><description>&lt;h1 id="unityのインストールパッケージのインポート通信方式の切替方法">Unityのインストール・パッケージのインポート・通信方式の切替方法&lt;/h1>
&lt;h2 id="unityのインストール">Unityのインストール&lt;/h2>
&lt;hr>
&lt;p>Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．&lt;/p>
&lt;p>以下のサイト等が参考になるかと思います．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-camp.in/note/technology/44408/">https://tech-camp.in/note/technology/44408/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>※動作確認は&lt;code>Unity 2020.1.0b9(64bit)&lt;/code>で行っております．&lt;br>
　使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．&lt;/p>
&lt;h2 id="unityパッケージのインポート">Unityパッケージのインポート&lt;/h2>
&lt;hr>
&lt;h3 id="unity-起動">Unity 起動&lt;/h3>
&lt;p>まず，インストールしたUnityを起動してください．&lt;br>
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_invoke.png " border="" width="800" />
&lt;/figure>

&lt;p>次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_create_project.png " border="" width="800" />
&lt;/figure>

&lt;p>成功すると，以下のようにUnityが起動します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_start.png " border="" width="800" />
&lt;/figure>

&lt;h3 id="unityパッケージのインポート-1">Unityパッケージのインポート&lt;/h3>
&lt;p>※画像は&lt;code>single-robot-HackEV.unitypackage&lt;/code>をインポートする際のものになります&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.0/</guid><description>&lt;h1 id="unityのインストールパッケージのインポート通信方式の切替方法">Unityのインストール・パッケージのインポート・通信方式の切替方法&lt;/h1>
&lt;h2 id="unityのインストール">Unityのインストール&lt;/h2>
&lt;hr>
&lt;p>Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．&lt;/p>
&lt;p>以下のサイト等が参考になるかと思います．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-camp.in/note/technology/44408/">https://tech-camp.in/note/technology/44408/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>※動作確認は&lt;code>Unity 2020.1.0b9(64bit)&lt;/code>で行っております．&lt;br>
　使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．&lt;/p>
&lt;h2 id="unityパッケージのインポート">Unityパッケージのインポート&lt;/h2>
&lt;hr>
&lt;h3 id="unity-起動">Unity 起動&lt;/h3>
&lt;p>まず，インストールしたUnityを起動してください．&lt;br>
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_invoke.png " border="" width="800" />
&lt;/figure>

&lt;p>次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_create_project.png " border="" width="800" />
&lt;/figure>

&lt;p>成功すると，以下のようにUnityが起動します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_start.png " border="" width="800" />
&lt;/figure>

&lt;h3 id="unityパッケージのインポート-1">Unityパッケージのインポート&lt;/h3>
&lt;p>※画像は&lt;code>single-robot-HackEV.unitypackage&lt;/code>をインポートする際のものになります&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/60_unity_install_v2.1/</guid><description>&lt;h1 id="unityのインストールパッケージのインポート通信方式の切替方法">Unityのインストール・パッケージのインポート・通信方式の切替方法&lt;/h1>
&lt;h2 id="unityのインストール">Unityのインストール&lt;/h2>
&lt;hr>
&lt;p>Unityのインストール方法は色々なサイト・書籍で紹介されておりますので，インストールください．&lt;/p>
&lt;p>以下のサイト等が参考になるかと思います．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-camp.in/note/technology/44408/">https://tech-camp.in/note/technology/44408/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>※動作確認は&lt;code>Unity 2020.1.0b9(64bit)&lt;/code>で行っております．&lt;br>
　使用する場合はこれ以降のバージョンのUnityをインストールすることをお勧めします．&lt;/p>
&lt;h2 id="unityパッケージのインポート">Unityパッケージのインポート&lt;/h2>
&lt;hr>
&lt;h3 id="unity-起動">Unity 起動&lt;/h3>
&lt;p>まず，インストールしたUnityを起動してください．&lt;br>
無事起動すると以下のような画面が出ますので，右上の「新規作成」を選択し新規プロジェクト作成します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_invoke.png " border="" width="800" />
&lt;/figure>

&lt;p>次の選択画面で，「プロジェクト名」に適当なプロジェクト名を設定して，「作成」ボタンを押下してください．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_create_project.png " border="" width="800" />
&lt;/figure>

&lt;p>成功すると，以下のようにUnityが起動します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_start.png " border="" width="800" />
&lt;/figure>

&lt;h3 id="unityパッケージのインポート-1">Unityパッケージのインポート&lt;/h3>
&lt;p>※画像は&lt;code>single-robot-HackEV.unitypackage&lt;/code>をインポートする際のものになります&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap/</guid><description>&lt;h1 id="mmap用unity設定">MMAP用Unity設定&lt;/h1>
&lt;p>UnityとathrillをMMAPで通信する場合は，Unity側で以下の設定を行います．&lt;/p>
&lt;p>Unity のメニューから，「Edit」⇒「Project Settings」を選択します．&lt;/p>
&lt;p>「Player」&lt;br>
&lt;code>Other Setting&lt;/code>の&lt;code>Scripting Define Symbols&lt;/code> に&lt;code>VDEV_IO_MMAP&lt;/code>と設定します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_setting_player_mmap.png " border="" width="700" />
&lt;/figure>

&lt;h1 id="mmap用パラメータ設定">MMAP用パラメータ設定&lt;/h1>
&lt;p>※なお，このページで紹介しているUnity画面の画像はWindows版のものです&lt;/p>
&lt;p>設定する場所は，Unity の以下のスクリプト・パラメータ(Filepath)部分です．&lt;/p>
&lt;p>&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F244147%2Feed2a22a-e74b-9e8f-0774-6ca34783a6e4.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b6a404498493184bdc1bcfe3d2749bad">&lt;img alt="image.png" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F244147%2Feed2a22a-e74b-9e8f-0774-6ca34783a6e4.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b6a404498493184bdc1bcfe3d2749bad">&lt;/a>&lt;/p>
&lt;p>インポート直後ですと，[EV3 Actuator] と [EV3 Sensor]の Filepath は空白です．&lt;br>
ここに設定する値としては，athrillとUnity間で通信するためのMMAPファイルの絶対パスを指定します．&lt;/p>
&lt;p>MMAPファイル自体は，以下の２ファイルが&lt;code>app.c&lt;/code>と同じフォルダに含まれています．&lt;/p>
&lt;ul>
&lt;li>athrill_mmap.bin&lt;/li>
&lt;li>unity_mmap.bin&lt;/li>
&lt;/ul>
&lt;p>unity_mmap.bin の絶対ファイルパスを，[EV3 Sensor]のFilepathに設定してください(設定例：下図)．&lt;/p>
&lt;p>&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F244147%2F95b47a49-4904-16dd-f568-09d285afd2a1.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c00912d532173b48318ebd94f6deec5a">&lt;img alt="image.png" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F244147%2F95b47a49-4904-16dd-f568-09d285afd2a1.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c00912d532173b48318ebd94f6deec5a">&lt;/a>&lt;/p>
&lt;p>athrill_mmap.bin の絶対ファイルパスを，[EV3 Actuator]のFilepathに設定してください(設定例：下図)．&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_mmap_v2.0/</guid><description>&lt;h1 id="mmap用unity設定">MMAP用Unity設定&lt;/h1>
&lt;p>UnityとathrillをMMAPで通信する場合は，Unity側で以下の設定を行います．&lt;/p>
&lt;p>Unity のメニューから，「Edit」⇒「Project Settings」を選択します．&lt;/p>
&lt;p>「Player」&lt;br>
&lt;code>Other Setting&lt;/code>の&lt;code>Scripting Define Symbols&lt;/code> に&lt;code>VDEV_IO_MMAP&lt;/code>と設定します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_setting_player_mmap.png " border="" width="700" />
&lt;/figure>

&lt;h1 id="mmap用パラメータ設定">MMAP用パラメータ設定&lt;/h1>
&lt;p>※なお，このページで紹介しているUnity画面の画像はWindows版のものです&lt;/p>
&lt;p>&lt;code>Hierarchy&lt;/code>ビューで&lt;code>Robot&lt;/code>配下の&lt;code>RoboModel&lt;/code>を選択してください．&lt;br>
すると画面右の&lt;code>Inspector&lt;/code>ビューに[Io Writer (Script)]と[Io Reader (Script)]の項目が表示されます.&lt;/p>
&lt;p>

&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_hierarchy_view_robo_v2.0.png " border="" width="300" />
&lt;/figure>



&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_setting_mmap_emp.png " border="" width="300" />
&lt;/figure>
&lt;/p></description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp/</guid><description>&lt;h1 id="udp用unity設定">UDP用Unity設定&lt;/h1>
&lt;p>UnityとathrillをUDPで通信する場合は，Unity側で以下の設定を行います．&lt;/p>
&lt;p>&lt;code>Hierarchy&lt;/code>ビューで&lt;code>Robot&lt;/code>配下の&lt;code>RoboModel_3&lt;/code>を選択してください．&lt;br>
すると画面右の&lt;code>Inspector&lt;/code>ビューに[EV3 Motor (Script)]の項目が表示されます.&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_hierarchy_view.png " border="" width="300" />
&lt;/figure>

&lt;p>表示されたら，項目内のプロパティ&lt;code>Max Diff Time&lt;/code>を40000に変更します．&lt;/p>


&lt;figure>
 &lt;img src="https://toppers.github.io/hakoniwa/hakoniwa/img/single-robot/unity_fix_maxdifftime.png " border="" width="350" />
&lt;/figure>

&lt;h1 id="udp用パラメータ設定">UDP用パラメータ設定&lt;/h1>
&lt;p>UnityとathrillをUDPで通信する場合は，以下のパラメータを設定する必要があります．&lt;/p>
&lt;p>&lt;strong>※ただし，1台のPCでシミュレーションを実行する場合は，以下の設定は不要です．&lt;/strong>&lt;/p>
&lt;h3 id="説明する上でのipアドレスの構成例">説明する上でのIPアドレスの構成例&lt;/h3>
&lt;p>Unity側のIPアドレス：192.168.11.32&lt;br>
athrill側のIPアドレス：192.168.11.20&lt;/p>
&lt;p>なお，IPアドレスの確認方法は以下のやり方でわかります．&lt;/p>
&lt;h4 id="お使いのpcがlinuxwslの場合">お使いのPCがLinux/WSLの場合&lt;/h4>
&lt;p>ターミナル上で ifconfig コマンドを叩いて，ethernetの inet addr の値を確認します．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ifconfig
eth0 Link encap:Ethernet HWaddr 54:ee:75:b4:3c:96
 inet addr:192.168.11.32 Bcast:192.168.11.255 Mask:255.255.255.0
 inet6 addr: fe80::cc6d:70d3:a934:a61b/64 Scope:Unknown
 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0
 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
&lt;/code>&lt;/pr</description></item><item><title>単体ロボット向けシミュレータ導入手順</title><link>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp_v2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toppers.github.io/hakoniwa/single-robot-setup-detail/61_unity_install_udp_v2.0/</guid><description>&lt;h1 id="udp用パラメータ設定">UDP用パラメータ設定&lt;/h1>
&lt;p>UnityとathrillをUDPで通信する場合は，以下のパラメータを設定する必要があります．&lt;/p>
&lt;p>&lt;strong>※ただし，1台のPCでシミュレーションを実行する場合は，以下の設定は不要です．&lt;/strong>&lt;/p>
&lt;h3 id="説明する上でのipアドレスの構成例">説明する上でのIPアドレスの構成例&lt;/h3>
&lt;p>Unity側のIPアドレス：192.168.11.32&lt;br>
athrill側のIPアドレス：192.168.11.20&lt;/p>
&lt;p>なお，IPアドレスの確認方法は以下のやり方でわかります．&lt;/p>
&lt;h4 id="お使いのpcがlinuxwslの場合">お使いのPCがLinux/WSLの場合&lt;/h4>
&lt;p>ターミナル上で ifconfig コマンドを叩いて，ethernetの inet addr の値を確認します．&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ifconfig
eth0 Link encap:Ethernet HWaddr 54:ee:75:b4:3c:96
 inet addr:192.168.11.32 Bcast:192.168.11.255 Mask:255.255.255.0
 inet6 addr: fe80::cc6d:70d3:a934:a61b/64 Scope:Unknown
 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0
 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
&lt;/code>&lt;/pr</description></item></channel></rss>